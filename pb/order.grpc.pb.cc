// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: order.proto

#include "order.pb.h"
#include "order.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace gemini {

static const char* OrderService_method_names[] = {
  "/gemini.OrderService/PostOrder",
  "/gemini.OrderService/ListOrderBySellerId",
  "/gemini.OrderService/ListOrderByOrdererId",
  "/gemini.OrderService/FindOrder",
  "/gemini.OrderService/DeleteOrder",
};

std::unique_ptr< OrderService::Stub> OrderService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< OrderService::Stub> stub(new OrderService::Stub(channel));
  return stub;
}

OrderService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_PostOrder_(OrderService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListOrderBySellerId_(OrderService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListOrderByOrdererId_(OrderService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FindOrder_(OrderService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteOrder_(OrderService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status OrderService::Stub::PostOrder(::grpc::ClientContext* context, const ::gemini::PostOrderRequest& request, ::gemini::PostOrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostOrder_, context, request, response);
}

void OrderService::Stub::experimental_async::PostOrder(::grpc::ClientContext* context, const ::gemini::PostOrderRequest* request, ::gemini::PostOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostOrder_, context, request, response, std::move(f));
}

void OrderService::Stub::experimental_async::PostOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemini::PostOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostOrder_, context, request, response, std::move(f));
}

void OrderService::Stub::experimental_async::PostOrder(::grpc::ClientContext* context, const ::gemini::PostOrderRequest* request, ::gemini::PostOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostOrder_, context, request, response, reactor);
}

void OrderService::Stub::experimental_async::PostOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemini::PostOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PostOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gemini::PostOrderResponse>* OrderService::Stub::AsyncPostOrderRaw(::grpc::ClientContext* context, const ::gemini::PostOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::gemini::PostOrderResponse>::Create(channel_.get(), cq, rpcmethod_PostOrder_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::gemini::PostOrderResponse>* OrderService::Stub::PrepareAsyncPostOrderRaw(::grpc::ClientContext* context, const ::gemini::PostOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::gemini::PostOrderResponse>::Create(channel_.get(), cq, rpcmethod_PostOrder_, context, request, false);
}

::grpc::Status OrderService::Stub::ListOrderBySellerId(::grpc::ClientContext* context, const ::gemini::ListOrderBySellerIdRequest& request, ::gemini::ListOrderBySellerIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListOrderBySellerId_, context, request, response);
}

void OrderService::Stub::experimental_async::ListOrderBySellerId(::grpc::ClientContext* context, const ::gemini::ListOrderBySellerIdRequest* request, ::gemini::ListOrderBySellerIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListOrderBySellerId_, context, request, response, std::move(f));
}

void OrderService::Stub::experimental_async::ListOrderBySellerId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemini::ListOrderBySellerIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListOrderBySellerId_, context, request, response, std::move(f));
}

void OrderService::Stub::experimental_async::ListOrderBySellerId(::grpc::ClientContext* context, const ::gemini::ListOrderBySellerIdRequest* request, ::gemini::ListOrderBySellerIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListOrderBySellerId_, context, request, response, reactor);
}

void OrderService::Stub::experimental_async::ListOrderBySellerId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemini::ListOrderBySellerIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListOrderBySellerId_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gemini::ListOrderBySellerIdResponse>* OrderService::Stub::AsyncListOrderBySellerIdRaw(::grpc::ClientContext* context, const ::gemini::ListOrderBySellerIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::gemini::ListOrderBySellerIdResponse>::Create(channel_.get(), cq, rpcmethod_ListOrderBySellerId_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::gemini::ListOrderBySellerIdResponse>* OrderService::Stub::PrepareAsyncListOrderBySellerIdRaw(::grpc::ClientContext* context, const ::gemini::ListOrderBySellerIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::gemini::ListOrderBySellerIdResponse>::Create(channel_.get(), cq, rpcmethod_ListOrderBySellerId_, context, request, false);
}

::grpc::Status OrderService::Stub::ListOrderByOrdererId(::grpc::ClientContext* context, const ::gemini::ListOrderByOrdererIdRequest& request, ::gemini::ListOrderByOrdererIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListOrderByOrdererId_, context, request, response);
}

void OrderService::Stub::experimental_async::ListOrderByOrdererId(::grpc::ClientContext* context, const ::gemini::ListOrderByOrdererIdRequest* request, ::gemini::ListOrderByOrdererIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListOrderByOrdererId_, context, request, response, std::move(f));
}

void OrderService::Stub::experimental_async::ListOrderByOrdererId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemini::ListOrderByOrdererIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListOrderByOrdererId_, context, request, response, std::move(f));
}

void OrderService::Stub::experimental_async::ListOrderByOrdererId(::grpc::ClientContext* context, const ::gemini::ListOrderByOrdererIdRequest* request, ::gemini::ListOrderByOrdererIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListOrderByOrdererId_, context, request, response, reactor);
}

void OrderService::Stub::experimental_async::ListOrderByOrdererId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemini::ListOrderByOrdererIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListOrderByOrdererId_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gemini::ListOrderByOrdererIdResponse>* OrderService::Stub::AsyncListOrderByOrdererIdRaw(::grpc::ClientContext* context, const ::gemini::ListOrderByOrdererIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::gemini::ListOrderByOrdererIdResponse>::Create(channel_.get(), cq, rpcmethod_ListOrderByOrdererId_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::gemini::ListOrderByOrdererIdResponse>* OrderService::Stub::PrepareAsyncListOrderByOrdererIdRaw(::grpc::ClientContext* context, const ::gemini::ListOrderByOrdererIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::gemini::ListOrderByOrdererIdResponse>::Create(channel_.get(), cq, rpcmethod_ListOrderByOrdererId_, context, request, false);
}

::grpc::Status OrderService::Stub::FindOrder(::grpc::ClientContext* context, const ::gemini::FindOrderRequest& request, ::gemini::FindOrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_FindOrder_, context, request, response);
}

void OrderService::Stub::experimental_async::FindOrder(::grpc::ClientContext* context, const ::gemini::FindOrderRequest* request, ::gemini::FindOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_FindOrder_, context, request, response, std::move(f));
}

void OrderService::Stub::experimental_async::FindOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemini::FindOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_FindOrder_, context, request, response, std::move(f));
}

void OrderService::Stub::experimental_async::FindOrder(::grpc::ClientContext* context, const ::gemini::FindOrderRequest* request, ::gemini::FindOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_FindOrder_, context, request, response, reactor);
}

void OrderService::Stub::experimental_async::FindOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemini::FindOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_FindOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gemini::FindOrderResponse>* OrderService::Stub::AsyncFindOrderRaw(::grpc::ClientContext* context, const ::gemini::FindOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::gemini::FindOrderResponse>::Create(channel_.get(), cq, rpcmethod_FindOrder_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::gemini::FindOrderResponse>* OrderService::Stub::PrepareAsyncFindOrderRaw(::grpc::ClientContext* context, const ::gemini::FindOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::gemini::FindOrderResponse>::Create(channel_.get(), cq, rpcmethod_FindOrder_, context, request, false);
}

::grpc::Status OrderService::Stub::DeleteOrder(::grpc::ClientContext* context, const ::gemini::DeleteOrderRequest& request, ::gemini::DeleteOrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteOrder_, context, request, response);
}

void OrderService::Stub::experimental_async::DeleteOrder(::grpc::ClientContext* context, const ::gemini::DeleteOrderRequest* request, ::gemini::DeleteOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteOrder_, context, request, response, std::move(f));
}

void OrderService::Stub::experimental_async::DeleteOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemini::DeleteOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteOrder_, context, request, response, std::move(f));
}

void OrderService::Stub::experimental_async::DeleteOrder(::grpc::ClientContext* context, const ::gemini::DeleteOrderRequest* request, ::gemini::DeleteOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteOrder_, context, request, response, reactor);
}

void OrderService::Stub::experimental_async::DeleteOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemini::DeleteOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gemini::DeleteOrderResponse>* OrderService::Stub::AsyncDeleteOrderRaw(::grpc::ClientContext* context, const ::gemini::DeleteOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::gemini::DeleteOrderResponse>::Create(channel_.get(), cq, rpcmethod_DeleteOrder_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::gemini::DeleteOrderResponse>* OrderService::Stub::PrepareAsyncDeleteOrderRaw(::grpc::ClientContext* context, const ::gemini::DeleteOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::gemini::DeleteOrderResponse>::Create(channel_.get(), cq, rpcmethod_DeleteOrder_, context, request, false);
}

OrderService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrderService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrderService::Service, ::gemini::PostOrderRequest, ::gemini::PostOrderResponse>(
          std::mem_fn(&OrderService::Service::PostOrder), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrderService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrderService::Service, ::gemini::ListOrderBySellerIdRequest, ::gemini::ListOrderBySellerIdResponse>(
          std::mem_fn(&OrderService::Service::ListOrderBySellerId), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrderService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrderService::Service, ::gemini::ListOrderByOrdererIdRequest, ::gemini::ListOrderByOrdererIdResponse>(
          std::mem_fn(&OrderService::Service::ListOrderByOrdererId), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrderService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrderService::Service, ::gemini::FindOrderRequest, ::gemini::FindOrderResponse>(
          std::mem_fn(&OrderService::Service::FindOrder), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrderService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrderService::Service, ::gemini::DeleteOrderRequest, ::gemini::DeleteOrderResponse>(
          std::mem_fn(&OrderService::Service::DeleteOrder), this)));
}

OrderService::Service::~Service() {
}

::grpc::Status OrderService::Service::PostOrder(::grpc::ServerContext* context, const ::gemini::PostOrderRequest* request, ::gemini::PostOrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrderService::Service::ListOrderBySellerId(::grpc::ServerContext* context, const ::gemini::ListOrderBySellerIdRequest* request, ::gemini::ListOrderBySellerIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrderService::Service::ListOrderByOrdererId(::grpc::ServerContext* context, const ::gemini::ListOrderByOrdererIdRequest* request, ::gemini::ListOrderByOrdererIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrderService::Service::FindOrder(::grpc::ServerContext* context, const ::gemini::FindOrderRequest* request, ::gemini::FindOrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrderService::Service::DeleteOrder(::grpc::ServerContext* context, const ::gemini::DeleteOrderRequest* request, ::gemini::DeleteOrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace gemini

