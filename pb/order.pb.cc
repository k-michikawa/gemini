// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: order.proto

#include "order.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_order_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Order_order_2eproto;
namespace gemini {
class OrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Order> _instance;
} _Order_default_instance_;
class PostOrderRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostOrderRequest> _instance;
} _PostOrderRequest_default_instance_;
class ListOrderBySellerIdRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListOrderBySellerIdRequest> _instance;
} _ListOrderBySellerIdRequest_default_instance_;
class ListOrderByOrdererIdRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListOrderByOrdererIdRequest> _instance;
} _ListOrderByOrdererIdRequest_default_instance_;
class FindOrderRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FindOrderRequest> _instance;
} _FindOrderRequest_default_instance_;
class DeleteOrderRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteOrderRequest> _instance;
} _DeleteOrderRequest_default_instance_;
class PostOrderResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostOrderResponse> _instance;
} _PostOrderResponse_default_instance_;
class ListOrderBySellerIdResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListOrderBySellerIdResponse> _instance;
} _ListOrderBySellerIdResponse_default_instance_;
class ListOrderByOrdererIdResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListOrderByOrdererIdResponse> _instance;
} _ListOrderByOrdererIdResponse_default_instance_;
class FindOrderResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FindOrderResponse> _instance;
} _FindOrderResponse_default_instance_;
class DeleteOrderResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteOrderResponse> _instance;
} _DeleteOrderResponse_default_instance_;
}  // namespace gemini
static void InitDefaultsscc_info_DeleteOrderRequest_order_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gemini::_DeleteOrderRequest_default_instance_;
    new (ptr) ::gemini::DeleteOrderRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gemini::DeleteOrderRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteOrderRequest_order_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteOrderRequest_order_2eproto}, {}};

static void InitDefaultsscc_info_DeleteOrderResponse_order_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gemini::_DeleteOrderResponse_default_instance_;
    new (ptr) ::gemini::DeleteOrderResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gemini::DeleteOrderResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteOrderResponse_order_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteOrderResponse_order_2eproto}, {}};

static void InitDefaultsscc_info_FindOrderRequest_order_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gemini::_FindOrderRequest_default_instance_;
    new (ptr) ::gemini::FindOrderRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gemini::FindOrderRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FindOrderRequest_order_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FindOrderRequest_order_2eproto}, {}};

static void InitDefaultsscc_info_FindOrderResponse_order_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gemini::_FindOrderResponse_default_instance_;
    new (ptr) ::gemini::FindOrderResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gemini::FindOrderResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FindOrderResponse_order_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FindOrderResponse_order_2eproto}, {
      &scc_info_Order_order_2eproto.base,}};

static void InitDefaultsscc_info_ListOrderByOrdererIdRequest_order_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gemini::_ListOrderByOrdererIdRequest_default_instance_;
    new (ptr) ::gemini::ListOrderByOrdererIdRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gemini::ListOrderByOrdererIdRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListOrderByOrdererIdRequest_order_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListOrderByOrdererIdRequest_order_2eproto}, {}};

static void InitDefaultsscc_info_ListOrderByOrdererIdResponse_order_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gemini::_ListOrderByOrdererIdResponse_default_instance_;
    new (ptr) ::gemini::ListOrderByOrdererIdResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gemini::ListOrderByOrdererIdResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListOrderByOrdererIdResponse_order_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListOrderByOrdererIdResponse_order_2eproto}, {
      &scc_info_Order_order_2eproto.base,}};

static void InitDefaultsscc_info_ListOrderBySellerIdRequest_order_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gemini::_ListOrderBySellerIdRequest_default_instance_;
    new (ptr) ::gemini::ListOrderBySellerIdRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gemini::ListOrderBySellerIdRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListOrderBySellerIdRequest_order_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListOrderBySellerIdRequest_order_2eproto}, {}};

static void InitDefaultsscc_info_ListOrderBySellerIdResponse_order_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gemini::_ListOrderBySellerIdResponse_default_instance_;
    new (ptr) ::gemini::ListOrderBySellerIdResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gemini::ListOrderBySellerIdResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListOrderBySellerIdResponse_order_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListOrderBySellerIdResponse_order_2eproto}, {
      &scc_info_Order_order_2eproto.base,}};

static void InitDefaultsscc_info_Order_order_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gemini::_Order_default_instance_;
    new (ptr) ::gemini::Order();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gemini::Order::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Order_order_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Order_order_2eproto}, {}};

static void InitDefaultsscc_info_PostOrderRequest_order_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gemini::_PostOrderRequest_default_instance_;
    new (ptr) ::gemini::PostOrderRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gemini::PostOrderRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PostOrderRequest_order_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PostOrderRequest_order_2eproto}, {}};

static void InitDefaultsscc_info_PostOrderResponse_order_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gemini::_PostOrderResponse_default_instance_;
    new (ptr) ::gemini::PostOrderResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gemini::PostOrderResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PostOrderResponse_order_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PostOrderResponse_order_2eproto}, {
      &scc_info_Order_order_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_order_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_order_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_order_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_order_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gemini::Order, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gemini::Order, id_),
  PROTOBUF_FIELD_OFFSET(::gemini::Order, productid_),
  PROTOBUF_FIELD_OFFSET(::gemini::Order, ordererid_),
  PROTOBUF_FIELD_OFFSET(::gemini::Order, sellerid_),
  PROTOBUF_FIELD_OFFSET(::gemini::Order, price_),
  PROTOBUF_FIELD_OFFSET(::gemini::Order, productname_),
  PROTOBUF_FIELD_OFFSET(::gemini::Order, orderername_),
  PROTOBUF_FIELD_OFFSET(::gemini::Order, sellername_),
  PROTOBUF_FIELD_OFFSET(::gemini::Order, createdat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gemini::PostOrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gemini::PostOrderRequest, productid_),
  PROTOBUF_FIELD_OFFSET(::gemini::PostOrderRequest, ordererid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gemini::ListOrderBySellerIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gemini::ListOrderBySellerIdRequest, productid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gemini::ListOrderByOrdererIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gemini::ListOrderByOrdererIdRequest, ordererid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gemini::FindOrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gemini::FindOrderRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gemini::DeleteOrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gemini::DeleteOrderRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gemini::PostOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gemini::PostOrderResponse, order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gemini::ListOrderBySellerIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gemini::ListOrderBySellerIdResponse, order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gemini::ListOrderByOrdererIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gemini::ListOrderByOrdererIdResponse, order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gemini::FindOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gemini::FindOrderResponse, order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gemini::DeleteOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gemini::Order)},
  { 14, -1, sizeof(::gemini::PostOrderRequest)},
  { 21, -1, sizeof(::gemini::ListOrderBySellerIdRequest)},
  { 27, -1, sizeof(::gemini::ListOrderByOrdererIdRequest)},
  { 33, -1, sizeof(::gemini::FindOrderRequest)},
  { 39, -1, sizeof(::gemini::DeleteOrderRequest)},
  { 45, -1, sizeof(::gemini::PostOrderResponse)},
  { 51, -1, sizeof(::gemini::ListOrderBySellerIdResponse)},
  { 57, -1, sizeof(::gemini::ListOrderByOrdererIdResponse)},
  { 63, -1, sizeof(::gemini::FindOrderResponse)},
  { 69, -1, sizeof(::gemini::DeleteOrderResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gemini::_Order_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gemini::_PostOrderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gemini::_ListOrderBySellerIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gemini::_ListOrderByOrdererIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gemini::_FindOrderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gemini::_DeleteOrderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gemini::_PostOrderResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gemini::_ListOrderBySellerIdResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gemini::_ListOrderByOrdererIdResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gemini::_FindOrderResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gemini::_DeleteOrderResponse_default_instance_),
};

const char descriptor_table_protodef_order_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013order.proto\022\006gemini\"\253\001\n\005Order\022\n\n\002id\030\001 "
  "\001(\t\022\021\n\tproductId\030\002 \001(\t\022\021\n\tordererId\030\003 \001("
  "\t\022\020\n\010sellerId\030\004 \001(\t\022\r\n\005price\030\005 \001(\003\022\023\n\013pr"
  "oductName\030\006 \001(\t\022\023\n\013ordererName\030\007 \001(\t\022\022\n\n"
  "sellerName\030\010 \001(\t\022\021\n\tcreatedAt\030\t \001(\003\"8\n\020P"
  "ostOrderRequest\022\021\n\tproductId\030\001 \001(\t\022\021\n\tor"
  "dererId\030\002 \001(\t\"/\n\032ListOrderBySellerIdRequ"
  "est\022\021\n\tproductId\030\001 \001(\t\"0\n\033ListOrderByOrd"
  "ererIdRequest\022\021\n\tordererId\030\001 \001(\t\"\036\n\020Find"
  "OrderRequest\022\n\n\002id\030\001 \001(\t\" \n\022DeleteOrderR"
  "equest\022\n\n\002id\030\001 \001(\t\"1\n\021PostOrderResponse\022"
  "\034\n\005order\030\001 \001(\0132\r.gemini.Order\";\n\033ListOrd"
  "erBySellerIdResponse\022\034\n\005order\030\001 \001(\0132\r.ge"
  "mini.Order\"<\n\034ListOrderByOrdererIdRespon"
  "se\022\034\n\005order\030\001 \001(\0132\r.gemini.Order\"1\n\021Find"
  "OrderResponse\022\034\n\005order\030\001 \001(\0132\r.gemini.Or"
  "der\"\025\n\023DeleteOrderResponse2\235\003\n\014OrderServ"
  "ice\022@\n\tPostOrder\022\030.gemini.PostOrderReque"
  "st\032\031.gemini.PostOrderResponse\022^\n\023ListOrd"
  "erBySellerId\022\".gemini.ListOrderBySellerI"
  "dRequest\032#.gemini.ListOrderBySellerIdRes"
  "ponse\022a\n\024ListOrderByOrdererId\022#.gemini.L"
  "istOrderByOrdererIdRequest\032$.gemini.List"
  "OrderByOrdererIdResponse\022@\n\tFindOrder\022\030."
  "gemini.FindOrderRequest\032\031.gemini.FindOrd"
  "erResponse\022F\n\013DeleteOrder\022\032.gemini.Delet"
  "eOrderRequest\032\033.gemini.DeleteOrderRespon"
  "seb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_order_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_order_2eproto_sccs[11] = {
  &scc_info_DeleteOrderRequest_order_2eproto.base,
  &scc_info_DeleteOrderResponse_order_2eproto.base,
  &scc_info_FindOrderRequest_order_2eproto.base,
  &scc_info_FindOrderResponse_order_2eproto.base,
  &scc_info_ListOrderByOrdererIdRequest_order_2eproto.base,
  &scc_info_ListOrderByOrdererIdResponse_order_2eproto.base,
  &scc_info_ListOrderBySellerIdRequest_order_2eproto.base,
  &scc_info_ListOrderBySellerIdResponse_order_2eproto.base,
  &scc_info_Order_order_2eproto.base,
  &scc_info_PostOrderRequest_order_2eproto.base,
  &scc_info_PostOrderResponse_order_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_order_2eproto_once;
static bool descriptor_table_order_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_order_2eproto = {
  &descriptor_table_order_2eproto_initialized, descriptor_table_protodef_order_2eproto, "order.proto", 1090,
  &descriptor_table_order_2eproto_once, descriptor_table_order_2eproto_sccs, descriptor_table_order_2eproto_deps, 11, 0,
  schemas, file_default_instances, TableStruct_order_2eproto::offsets,
  file_level_metadata_order_2eproto, 11, file_level_enum_descriptors_order_2eproto, file_level_service_descriptors_order_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_order_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_order_2eproto), true);
namespace gemini {

// ===================================================================

void Order::InitAsDefaultInstance() {
}
class Order::_Internal {
 public:
};

Order::Order()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gemini.Order)
}
Order::Order(const Order& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  productid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_productid().empty()) {
    productid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.productid_);
  }
  ordererid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ordererid().empty()) {
    ordererid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ordererid_);
  }
  sellerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sellerid().empty()) {
    sellerid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sellerid_);
  }
  productname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_productname().empty()) {
    productname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.productname_);
  }
  orderername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_orderername().empty()) {
    orderername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orderername_);
  }
  sellername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sellername().empty()) {
    sellername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sellername_);
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&createdat_) -
    reinterpret_cast<char*>(&price_)) + sizeof(createdat_));
  // @@protoc_insertion_point(copy_constructor:gemini.Order)
}

void Order::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Order_order_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  productid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ordererid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sellerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  productname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sellername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&createdat_) -
      reinterpret_cast<char*>(&price_)) + sizeof(createdat_));
}

Order::~Order() {
  // @@protoc_insertion_point(destructor:gemini.Order)
  SharedDtor();
}

void Order::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  productid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ordererid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sellerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  productname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sellername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Order::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Order& Order::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Order_order_2eproto.base);
  return *internal_default_instance();
}


void Order::Clear() {
// @@protoc_insertion_point(message_clear_start:gemini.Order)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  productid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ordererid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sellerid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  productname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderername_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sellername_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&createdat_) -
      reinterpret_cast<char*>(&price_)) + sizeof(createdat_));
  _internal_metadata_.Clear();
}

const char* Order::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gemini.Order.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string productId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_productid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gemini.Order.productId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ordererId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ordererid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gemini.Order.ordererId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sellerId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_sellerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gemini.Order.sellerId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string productName = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_productname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gemini.Order.productName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ordererName = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_orderername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gemini.Order.ordererName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sellerName = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_sellername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gemini.Order.sellerName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 createdAt = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          createdat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Order::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gemini.Order)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gemini.Order.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string productId = 2;
  if (this->productid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_productid().data(), static_cast<int>(this->_internal_productid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gemini.Order.productId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_productid(), target);
  }

  // string ordererId = 3;
  if (this->ordererid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ordererid().data(), static_cast<int>(this->_internal_ordererid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gemini.Order.ordererId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ordererid(), target);
  }

  // string sellerId = 4;
  if (this->sellerid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sellerid().data(), static_cast<int>(this->_internal_sellerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gemini.Order.sellerId");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sellerid(), target);
  }

  // int64 price = 5;
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_price(), target);
  }

  // string productName = 6;
  if (this->productname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_productname().data(), static_cast<int>(this->_internal_productname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gemini.Order.productName");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_productname(), target);
  }

  // string ordererName = 7;
  if (this->orderername().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_orderername().data(), static_cast<int>(this->_internal_orderername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gemini.Order.ordererName");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_orderername(), target);
  }

  // string sellerName = 8;
  if (this->sellername().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sellername().data(), static_cast<int>(this->_internal_sellername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gemini.Order.sellerName");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_sellername(), target);
  }

  // int64 createdAt = 9;
  if (this->createdat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_createdat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gemini.Order)
  return target;
}

size_t Order::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gemini.Order)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string productId = 2;
  if (this->productid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_productid());
  }

  // string ordererId = 3;
  if (this->ordererid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ordererid());
  }

  // string sellerId = 4;
  if (this->sellerid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sellerid());
  }

  // string productName = 6;
  if (this->productname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_productname());
  }

  // string ordererName = 7;
  if (this->orderername().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderername());
  }

  // string sellerName = 8;
  if (this->sellername().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sellername());
  }

  // int64 price = 5;
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_price());
  }

  // int64 createdAt = 9;
  if (this->createdat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_createdat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Order::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gemini.Order)
  GOOGLE_DCHECK_NE(&from, this);
  const Order* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Order>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gemini.Order)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gemini.Order)
    MergeFrom(*source);
  }
}

void Order::MergeFrom(const Order& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gemini.Order)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.productid().size() > 0) {

    productid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.productid_);
  }
  if (from.ordererid().size() > 0) {

    ordererid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ordererid_);
  }
  if (from.sellerid().size() > 0) {

    sellerid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sellerid_);
  }
  if (from.productname().size() > 0) {

    productname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.productname_);
  }
  if (from.orderername().size() > 0) {

    orderername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orderername_);
  }
  if (from.sellername().size() > 0) {

    sellername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sellername_);
  }
  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from.createdat() != 0) {
    _internal_set_createdat(from._internal_createdat());
  }
}

void Order::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gemini.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Order::CopyFrom(const Order& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gemini.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Order::IsInitialized() const {
  return true;
}

void Order::InternalSwap(Order* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  productid_.Swap(&other->productid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ordererid_.Swap(&other->ordererid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sellerid_.Swap(&other->sellerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  productname_.Swap(&other->productname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  orderername_.Swap(&other->orderername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sellername_.Swap(&other->sellername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(price_, other->price_);
  swap(createdat_, other->createdat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Order::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostOrderRequest::InitAsDefaultInstance() {
}
class PostOrderRequest::_Internal {
 public:
};

PostOrderRequest::PostOrderRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gemini.PostOrderRequest)
}
PostOrderRequest::PostOrderRequest(const PostOrderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  productid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_productid().empty()) {
    productid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.productid_);
  }
  ordererid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ordererid().empty()) {
    ordererid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ordererid_);
  }
  // @@protoc_insertion_point(copy_constructor:gemini.PostOrderRequest)
}

void PostOrderRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostOrderRequest_order_2eproto.base);
  productid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ordererid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PostOrderRequest::~PostOrderRequest() {
  // @@protoc_insertion_point(destructor:gemini.PostOrderRequest)
  SharedDtor();
}

void PostOrderRequest::SharedDtor() {
  productid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ordererid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PostOrderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostOrderRequest& PostOrderRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostOrderRequest_order_2eproto.base);
  return *internal_default_instance();
}


void PostOrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gemini.PostOrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  productid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ordererid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* PostOrderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string productId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_productid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gemini.PostOrderRequest.productId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ordererId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ordererid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gemini.PostOrderRequest.ordererId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostOrderRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gemini.PostOrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string productId = 1;
  if (this->productid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_productid().data(), static_cast<int>(this->_internal_productid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gemini.PostOrderRequest.productId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_productid(), target);
  }

  // string ordererId = 2;
  if (this->ordererid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ordererid().data(), static_cast<int>(this->_internal_ordererid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gemini.PostOrderRequest.ordererId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ordererid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gemini.PostOrderRequest)
  return target;
}

size_t PostOrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gemini.PostOrderRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string productId = 1;
  if (this->productid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_productid());
  }

  // string ordererId = 2;
  if (this->ordererid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ordererid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostOrderRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gemini.PostOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PostOrderRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostOrderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gemini.PostOrderRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gemini.PostOrderRequest)
    MergeFrom(*source);
  }
}

void PostOrderRequest::MergeFrom(const PostOrderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gemini.PostOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.productid().size() > 0) {

    productid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.productid_);
  }
  if (from.ordererid().size() > 0) {

    ordererid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ordererid_);
  }
}

void PostOrderRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gemini.PostOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostOrderRequest::CopyFrom(const PostOrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gemini.PostOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostOrderRequest::IsInitialized() const {
  return true;
}

void PostOrderRequest::InternalSwap(PostOrderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  productid_.Swap(&other->productid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ordererid_.Swap(&other->ordererid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PostOrderRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListOrderBySellerIdRequest::InitAsDefaultInstance() {
}
class ListOrderBySellerIdRequest::_Internal {
 public:
};

ListOrderBySellerIdRequest::ListOrderBySellerIdRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gemini.ListOrderBySellerIdRequest)
}
ListOrderBySellerIdRequest::ListOrderBySellerIdRequest(const ListOrderBySellerIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  productid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_productid().empty()) {
    productid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.productid_);
  }
  // @@protoc_insertion_point(copy_constructor:gemini.ListOrderBySellerIdRequest)
}

void ListOrderBySellerIdRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListOrderBySellerIdRequest_order_2eproto.base);
  productid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListOrderBySellerIdRequest::~ListOrderBySellerIdRequest() {
  // @@protoc_insertion_point(destructor:gemini.ListOrderBySellerIdRequest)
  SharedDtor();
}

void ListOrderBySellerIdRequest::SharedDtor() {
  productid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListOrderBySellerIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListOrderBySellerIdRequest& ListOrderBySellerIdRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListOrderBySellerIdRequest_order_2eproto.base);
  return *internal_default_instance();
}


void ListOrderBySellerIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gemini.ListOrderBySellerIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  productid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ListOrderBySellerIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string productId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_productid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gemini.ListOrderBySellerIdRequest.productId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListOrderBySellerIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gemini.ListOrderBySellerIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string productId = 1;
  if (this->productid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_productid().data(), static_cast<int>(this->_internal_productid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gemini.ListOrderBySellerIdRequest.productId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_productid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gemini.ListOrderBySellerIdRequest)
  return target;
}

size_t ListOrderBySellerIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gemini.ListOrderBySellerIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string productId = 1;
  if (this->productid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_productid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListOrderBySellerIdRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gemini.ListOrderBySellerIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListOrderBySellerIdRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListOrderBySellerIdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gemini.ListOrderBySellerIdRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gemini.ListOrderBySellerIdRequest)
    MergeFrom(*source);
  }
}

void ListOrderBySellerIdRequest::MergeFrom(const ListOrderBySellerIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gemini.ListOrderBySellerIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.productid().size() > 0) {

    productid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.productid_);
  }
}

void ListOrderBySellerIdRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gemini.ListOrderBySellerIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListOrderBySellerIdRequest::CopyFrom(const ListOrderBySellerIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gemini.ListOrderBySellerIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListOrderBySellerIdRequest::IsInitialized() const {
  return true;
}

void ListOrderBySellerIdRequest::InternalSwap(ListOrderBySellerIdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  productid_.Swap(&other->productid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListOrderBySellerIdRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListOrderByOrdererIdRequest::InitAsDefaultInstance() {
}
class ListOrderByOrdererIdRequest::_Internal {
 public:
};

ListOrderByOrdererIdRequest::ListOrderByOrdererIdRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gemini.ListOrderByOrdererIdRequest)
}
ListOrderByOrdererIdRequest::ListOrderByOrdererIdRequest(const ListOrderByOrdererIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ordererid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ordererid().empty()) {
    ordererid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ordererid_);
  }
  // @@protoc_insertion_point(copy_constructor:gemini.ListOrderByOrdererIdRequest)
}

void ListOrderByOrdererIdRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListOrderByOrdererIdRequest_order_2eproto.base);
  ordererid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListOrderByOrdererIdRequest::~ListOrderByOrdererIdRequest() {
  // @@protoc_insertion_point(destructor:gemini.ListOrderByOrdererIdRequest)
  SharedDtor();
}

void ListOrderByOrdererIdRequest::SharedDtor() {
  ordererid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListOrderByOrdererIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListOrderByOrdererIdRequest& ListOrderByOrdererIdRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListOrderByOrdererIdRequest_order_2eproto.base);
  return *internal_default_instance();
}


void ListOrderByOrdererIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gemini.ListOrderByOrdererIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ordererid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ListOrderByOrdererIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ordererId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ordererid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gemini.ListOrderByOrdererIdRequest.ordererId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListOrderByOrdererIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gemini.ListOrderByOrdererIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ordererId = 1;
  if (this->ordererid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ordererid().data(), static_cast<int>(this->_internal_ordererid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gemini.ListOrderByOrdererIdRequest.ordererId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ordererid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gemini.ListOrderByOrdererIdRequest)
  return target;
}

size_t ListOrderByOrdererIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gemini.ListOrderByOrdererIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ordererId = 1;
  if (this->ordererid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ordererid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListOrderByOrdererIdRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gemini.ListOrderByOrdererIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListOrderByOrdererIdRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListOrderByOrdererIdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gemini.ListOrderByOrdererIdRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gemini.ListOrderByOrdererIdRequest)
    MergeFrom(*source);
  }
}

void ListOrderByOrdererIdRequest::MergeFrom(const ListOrderByOrdererIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gemini.ListOrderByOrdererIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ordererid().size() > 0) {

    ordererid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ordererid_);
  }
}

void ListOrderByOrdererIdRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gemini.ListOrderByOrdererIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListOrderByOrdererIdRequest::CopyFrom(const ListOrderByOrdererIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gemini.ListOrderByOrdererIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListOrderByOrdererIdRequest::IsInitialized() const {
  return true;
}

void ListOrderByOrdererIdRequest::InternalSwap(ListOrderByOrdererIdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ordererid_.Swap(&other->ordererid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListOrderByOrdererIdRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FindOrderRequest::InitAsDefaultInstance() {
}
class FindOrderRequest::_Internal {
 public:
};

FindOrderRequest::FindOrderRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gemini.FindOrderRequest)
}
FindOrderRequest::FindOrderRequest(const FindOrderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:gemini.FindOrderRequest)
}

void FindOrderRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FindOrderRequest_order_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FindOrderRequest::~FindOrderRequest() {
  // @@protoc_insertion_point(destructor:gemini.FindOrderRequest)
  SharedDtor();
}

void FindOrderRequest::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FindOrderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FindOrderRequest& FindOrderRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FindOrderRequest_order_2eproto.base);
  return *internal_default_instance();
}


void FindOrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gemini.FindOrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* FindOrderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gemini.FindOrderRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FindOrderRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gemini.FindOrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gemini.FindOrderRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gemini.FindOrderRequest)
  return target;
}

size_t FindOrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gemini.FindOrderRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FindOrderRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gemini.FindOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FindOrderRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FindOrderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gemini.FindOrderRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gemini.FindOrderRequest)
    MergeFrom(*source);
  }
}

void FindOrderRequest::MergeFrom(const FindOrderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gemini.FindOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void FindOrderRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gemini.FindOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindOrderRequest::CopyFrom(const FindOrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gemini.FindOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindOrderRequest::IsInitialized() const {
  return true;
}

void FindOrderRequest::InternalSwap(FindOrderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata FindOrderRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteOrderRequest::InitAsDefaultInstance() {
}
class DeleteOrderRequest::_Internal {
 public:
};

DeleteOrderRequest::DeleteOrderRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gemini.DeleteOrderRequest)
}
DeleteOrderRequest::DeleteOrderRequest(const DeleteOrderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:gemini.DeleteOrderRequest)
}

void DeleteOrderRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteOrderRequest_order_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteOrderRequest::~DeleteOrderRequest() {
  // @@protoc_insertion_point(destructor:gemini.DeleteOrderRequest)
  SharedDtor();
}

void DeleteOrderRequest::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteOrderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteOrderRequest& DeleteOrderRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteOrderRequest_order_2eproto.base);
  return *internal_default_instance();
}


void DeleteOrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gemini.DeleteOrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* DeleteOrderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "gemini.DeleteOrderRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteOrderRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gemini.DeleteOrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "gemini.DeleteOrderRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gemini.DeleteOrderRequest)
  return target;
}

size_t DeleteOrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gemini.DeleteOrderRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteOrderRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gemini.DeleteOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteOrderRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteOrderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gemini.DeleteOrderRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gemini.DeleteOrderRequest)
    MergeFrom(*source);
  }
}

void DeleteOrderRequest::MergeFrom(const DeleteOrderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gemini.DeleteOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void DeleteOrderRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gemini.DeleteOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteOrderRequest::CopyFrom(const DeleteOrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gemini.DeleteOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteOrderRequest::IsInitialized() const {
  return true;
}

void DeleteOrderRequest::InternalSwap(DeleteOrderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteOrderRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostOrderResponse::InitAsDefaultInstance() {
  ::gemini::_PostOrderResponse_default_instance_._instance.get_mutable()->order_ = const_cast< ::gemini::Order*>(
      ::gemini::Order::internal_default_instance());
}
class PostOrderResponse::_Internal {
 public:
  static const ::gemini::Order& order(const PostOrderResponse* msg);
};

const ::gemini::Order&
PostOrderResponse::_Internal::order(const PostOrderResponse* msg) {
  return *msg->order_;
}
PostOrderResponse::PostOrderResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gemini.PostOrderResponse)
}
PostOrderResponse::PostOrderResponse(const PostOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_order()) {
    order_ = new ::gemini::Order(*from.order_);
  } else {
    order_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gemini.PostOrderResponse)
}

void PostOrderResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostOrderResponse_order_2eproto.base);
  order_ = nullptr;
}

PostOrderResponse::~PostOrderResponse() {
  // @@protoc_insertion_point(destructor:gemini.PostOrderResponse)
  SharedDtor();
}

void PostOrderResponse::SharedDtor() {
  if (this != internal_default_instance()) delete order_;
}

void PostOrderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostOrderResponse& PostOrderResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostOrderResponse_order_2eproto.base);
  return *internal_default_instance();
}


void PostOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gemini.PostOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PostOrderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gemini.Order order = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostOrderResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gemini.PostOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gemini.Order order = 1;
  if (this->has_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::order(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gemini.PostOrderResponse)
  return target;
}

size_t PostOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gemini.PostOrderResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gemini.Order order = 1;
  if (this->has_order()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *order_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostOrderResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gemini.PostOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PostOrderResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostOrderResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gemini.PostOrderResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gemini.PostOrderResponse)
    MergeFrom(*source);
  }
}

void PostOrderResponse::MergeFrom(const PostOrderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gemini.PostOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_order()) {
    _internal_mutable_order()->::gemini::Order::MergeFrom(from._internal_order());
  }
}

void PostOrderResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gemini.PostOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostOrderResponse::CopyFrom(const PostOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gemini.PostOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostOrderResponse::IsInitialized() const {
  return true;
}

void PostOrderResponse::InternalSwap(PostOrderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(order_, other->order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostOrderResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListOrderBySellerIdResponse::InitAsDefaultInstance() {
  ::gemini::_ListOrderBySellerIdResponse_default_instance_._instance.get_mutable()->order_ = const_cast< ::gemini::Order*>(
      ::gemini::Order::internal_default_instance());
}
class ListOrderBySellerIdResponse::_Internal {
 public:
  static const ::gemini::Order& order(const ListOrderBySellerIdResponse* msg);
};

const ::gemini::Order&
ListOrderBySellerIdResponse::_Internal::order(const ListOrderBySellerIdResponse* msg) {
  return *msg->order_;
}
ListOrderBySellerIdResponse::ListOrderBySellerIdResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gemini.ListOrderBySellerIdResponse)
}
ListOrderBySellerIdResponse::ListOrderBySellerIdResponse(const ListOrderBySellerIdResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_order()) {
    order_ = new ::gemini::Order(*from.order_);
  } else {
    order_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gemini.ListOrderBySellerIdResponse)
}

void ListOrderBySellerIdResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListOrderBySellerIdResponse_order_2eproto.base);
  order_ = nullptr;
}

ListOrderBySellerIdResponse::~ListOrderBySellerIdResponse() {
  // @@protoc_insertion_point(destructor:gemini.ListOrderBySellerIdResponse)
  SharedDtor();
}

void ListOrderBySellerIdResponse::SharedDtor() {
  if (this != internal_default_instance()) delete order_;
}

void ListOrderBySellerIdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListOrderBySellerIdResponse& ListOrderBySellerIdResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListOrderBySellerIdResponse_order_2eproto.base);
  return *internal_default_instance();
}


void ListOrderBySellerIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gemini.ListOrderBySellerIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ListOrderBySellerIdResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gemini.Order order = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListOrderBySellerIdResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gemini.ListOrderBySellerIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gemini.Order order = 1;
  if (this->has_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::order(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gemini.ListOrderBySellerIdResponse)
  return target;
}

size_t ListOrderBySellerIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gemini.ListOrderBySellerIdResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gemini.Order order = 1;
  if (this->has_order()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *order_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListOrderBySellerIdResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gemini.ListOrderBySellerIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListOrderBySellerIdResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListOrderBySellerIdResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gemini.ListOrderBySellerIdResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gemini.ListOrderBySellerIdResponse)
    MergeFrom(*source);
  }
}

void ListOrderBySellerIdResponse::MergeFrom(const ListOrderBySellerIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gemini.ListOrderBySellerIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_order()) {
    _internal_mutable_order()->::gemini::Order::MergeFrom(from._internal_order());
  }
}

void ListOrderBySellerIdResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gemini.ListOrderBySellerIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListOrderBySellerIdResponse::CopyFrom(const ListOrderBySellerIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gemini.ListOrderBySellerIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListOrderBySellerIdResponse::IsInitialized() const {
  return true;
}

void ListOrderBySellerIdResponse::InternalSwap(ListOrderBySellerIdResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(order_, other->order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListOrderBySellerIdResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListOrderByOrdererIdResponse::InitAsDefaultInstance() {
  ::gemini::_ListOrderByOrdererIdResponse_default_instance_._instance.get_mutable()->order_ = const_cast< ::gemini::Order*>(
      ::gemini::Order::internal_default_instance());
}
class ListOrderByOrdererIdResponse::_Internal {
 public:
  static const ::gemini::Order& order(const ListOrderByOrdererIdResponse* msg);
};

const ::gemini::Order&
ListOrderByOrdererIdResponse::_Internal::order(const ListOrderByOrdererIdResponse* msg) {
  return *msg->order_;
}
ListOrderByOrdererIdResponse::ListOrderByOrdererIdResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gemini.ListOrderByOrdererIdResponse)
}
ListOrderByOrdererIdResponse::ListOrderByOrdererIdResponse(const ListOrderByOrdererIdResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_order()) {
    order_ = new ::gemini::Order(*from.order_);
  } else {
    order_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gemini.ListOrderByOrdererIdResponse)
}

void ListOrderByOrdererIdResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListOrderByOrdererIdResponse_order_2eproto.base);
  order_ = nullptr;
}

ListOrderByOrdererIdResponse::~ListOrderByOrdererIdResponse() {
  // @@protoc_insertion_point(destructor:gemini.ListOrderByOrdererIdResponse)
  SharedDtor();
}

void ListOrderByOrdererIdResponse::SharedDtor() {
  if (this != internal_default_instance()) delete order_;
}

void ListOrderByOrdererIdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListOrderByOrdererIdResponse& ListOrderByOrdererIdResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListOrderByOrdererIdResponse_order_2eproto.base);
  return *internal_default_instance();
}


void ListOrderByOrdererIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gemini.ListOrderByOrdererIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ListOrderByOrdererIdResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gemini.Order order = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListOrderByOrdererIdResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gemini.ListOrderByOrdererIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gemini.Order order = 1;
  if (this->has_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::order(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gemini.ListOrderByOrdererIdResponse)
  return target;
}

size_t ListOrderByOrdererIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gemini.ListOrderByOrdererIdResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gemini.Order order = 1;
  if (this->has_order()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *order_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListOrderByOrdererIdResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gemini.ListOrderByOrdererIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListOrderByOrdererIdResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListOrderByOrdererIdResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gemini.ListOrderByOrdererIdResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gemini.ListOrderByOrdererIdResponse)
    MergeFrom(*source);
  }
}

void ListOrderByOrdererIdResponse::MergeFrom(const ListOrderByOrdererIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gemini.ListOrderByOrdererIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_order()) {
    _internal_mutable_order()->::gemini::Order::MergeFrom(from._internal_order());
  }
}

void ListOrderByOrdererIdResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gemini.ListOrderByOrdererIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListOrderByOrdererIdResponse::CopyFrom(const ListOrderByOrdererIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gemini.ListOrderByOrdererIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListOrderByOrdererIdResponse::IsInitialized() const {
  return true;
}

void ListOrderByOrdererIdResponse::InternalSwap(ListOrderByOrdererIdResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(order_, other->order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListOrderByOrdererIdResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FindOrderResponse::InitAsDefaultInstance() {
  ::gemini::_FindOrderResponse_default_instance_._instance.get_mutable()->order_ = const_cast< ::gemini::Order*>(
      ::gemini::Order::internal_default_instance());
}
class FindOrderResponse::_Internal {
 public:
  static const ::gemini::Order& order(const FindOrderResponse* msg);
};

const ::gemini::Order&
FindOrderResponse::_Internal::order(const FindOrderResponse* msg) {
  return *msg->order_;
}
FindOrderResponse::FindOrderResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gemini.FindOrderResponse)
}
FindOrderResponse::FindOrderResponse(const FindOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_order()) {
    order_ = new ::gemini::Order(*from.order_);
  } else {
    order_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:gemini.FindOrderResponse)
}

void FindOrderResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FindOrderResponse_order_2eproto.base);
  order_ = nullptr;
}

FindOrderResponse::~FindOrderResponse() {
  // @@protoc_insertion_point(destructor:gemini.FindOrderResponse)
  SharedDtor();
}

void FindOrderResponse::SharedDtor() {
  if (this != internal_default_instance()) delete order_;
}

void FindOrderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FindOrderResponse& FindOrderResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FindOrderResponse_order_2eproto.base);
  return *internal_default_instance();
}


void FindOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gemini.FindOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
  _internal_metadata_.Clear();
}

const char* FindOrderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .gemini.Order order = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FindOrderResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gemini.FindOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .gemini.Order order = 1;
  if (this->has_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::order(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gemini.FindOrderResponse)
  return target;
}

size_t FindOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gemini.FindOrderResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gemini.Order order = 1;
  if (this->has_order()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *order_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FindOrderResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gemini.FindOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FindOrderResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FindOrderResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gemini.FindOrderResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gemini.FindOrderResponse)
    MergeFrom(*source);
  }
}

void FindOrderResponse::MergeFrom(const FindOrderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gemini.FindOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_order()) {
    _internal_mutable_order()->::gemini::Order::MergeFrom(from._internal_order());
  }
}

void FindOrderResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gemini.FindOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FindOrderResponse::CopyFrom(const FindOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gemini.FindOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindOrderResponse::IsInitialized() const {
  return true;
}

void FindOrderResponse::InternalSwap(FindOrderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(order_, other->order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FindOrderResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteOrderResponse::InitAsDefaultInstance() {
}
class DeleteOrderResponse::_Internal {
 public:
};

DeleteOrderResponse::DeleteOrderResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gemini.DeleteOrderResponse)
}
DeleteOrderResponse::DeleteOrderResponse(const DeleteOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gemini.DeleteOrderResponse)
}

void DeleteOrderResponse::SharedCtor() {
}

DeleteOrderResponse::~DeleteOrderResponse() {
  // @@protoc_insertion_point(destructor:gemini.DeleteOrderResponse)
  SharedDtor();
}

void DeleteOrderResponse::SharedDtor() {
}

void DeleteOrderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteOrderResponse& DeleteOrderResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteOrderResponse_order_2eproto.base);
  return *internal_default_instance();
}


void DeleteOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gemini.DeleteOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* DeleteOrderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteOrderResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gemini.DeleteOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gemini.DeleteOrderResponse)
  return target;
}

size_t DeleteOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gemini.DeleteOrderResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteOrderResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gemini.DeleteOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteOrderResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteOrderResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gemini.DeleteOrderResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gemini.DeleteOrderResponse)
    MergeFrom(*source);
  }
}

void DeleteOrderResponse::MergeFrom(const DeleteOrderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gemini.DeleteOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteOrderResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gemini.DeleteOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteOrderResponse::CopyFrom(const DeleteOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gemini.DeleteOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteOrderResponse::IsInitialized() const {
  return true;
}

void DeleteOrderResponse::InternalSwap(DeleteOrderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteOrderResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gemini
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gemini::Order* Arena::CreateMaybeMessage< ::gemini::Order >(Arena* arena) {
  return Arena::CreateInternal< ::gemini::Order >(arena);
}
template<> PROTOBUF_NOINLINE ::gemini::PostOrderRequest* Arena::CreateMaybeMessage< ::gemini::PostOrderRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gemini::PostOrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gemini::ListOrderBySellerIdRequest* Arena::CreateMaybeMessage< ::gemini::ListOrderBySellerIdRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gemini::ListOrderBySellerIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gemini::ListOrderByOrdererIdRequest* Arena::CreateMaybeMessage< ::gemini::ListOrderByOrdererIdRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gemini::ListOrderByOrdererIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gemini::FindOrderRequest* Arena::CreateMaybeMessage< ::gemini::FindOrderRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gemini::FindOrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gemini::DeleteOrderRequest* Arena::CreateMaybeMessage< ::gemini::DeleteOrderRequest >(Arena* arena) {
  return Arena::CreateInternal< ::gemini::DeleteOrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gemini::PostOrderResponse* Arena::CreateMaybeMessage< ::gemini::PostOrderResponse >(Arena* arena) {
  return Arena::CreateInternal< ::gemini::PostOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::gemini::ListOrderBySellerIdResponse* Arena::CreateMaybeMessage< ::gemini::ListOrderBySellerIdResponse >(Arena* arena) {
  return Arena::CreateInternal< ::gemini::ListOrderBySellerIdResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::gemini::ListOrderByOrdererIdResponse* Arena::CreateMaybeMessage< ::gemini::ListOrderByOrdererIdResponse >(Arena* arena) {
  return Arena::CreateInternal< ::gemini::ListOrderByOrdererIdResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::gemini::FindOrderResponse* Arena::CreateMaybeMessage< ::gemini::FindOrderResponse >(Arena* arena) {
  return Arena::CreateInternal< ::gemini::FindOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::gemini::DeleteOrderResponse* Arena::CreateMaybeMessage< ::gemini::DeleteOrderResponse >(Arena* arena) {
  return Arena::CreateInternal< ::gemini::DeleteOrderResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
