// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: order.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_order_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_order_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_order_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_order_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_order_2eproto;
namespace gemini {
class DeleteOrderRequest;
class DeleteOrderRequestDefaultTypeInternal;
extern DeleteOrderRequestDefaultTypeInternal _DeleteOrderRequest_default_instance_;
class DeleteOrderResponse;
class DeleteOrderResponseDefaultTypeInternal;
extern DeleteOrderResponseDefaultTypeInternal _DeleteOrderResponse_default_instance_;
class FindOrderRequest;
class FindOrderRequestDefaultTypeInternal;
extern FindOrderRequestDefaultTypeInternal _FindOrderRequest_default_instance_;
class FindOrderResponse;
class FindOrderResponseDefaultTypeInternal;
extern FindOrderResponseDefaultTypeInternal _FindOrderResponse_default_instance_;
class ListOrderByOrdererIdRequest;
class ListOrderByOrdererIdRequestDefaultTypeInternal;
extern ListOrderByOrdererIdRequestDefaultTypeInternal _ListOrderByOrdererIdRequest_default_instance_;
class ListOrderByOrdererIdResponse;
class ListOrderByOrdererIdResponseDefaultTypeInternal;
extern ListOrderByOrdererIdResponseDefaultTypeInternal _ListOrderByOrdererIdResponse_default_instance_;
class ListOrderBySellerIdRequest;
class ListOrderBySellerIdRequestDefaultTypeInternal;
extern ListOrderBySellerIdRequestDefaultTypeInternal _ListOrderBySellerIdRequest_default_instance_;
class ListOrderBySellerIdResponse;
class ListOrderBySellerIdResponseDefaultTypeInternal;
extern ListOrderBySellerIdResponseDefaultTypeInternal _ListOrderBySellerIdResponse_default_instance_;
class Order;
class OrderDefaultTypeInternal;
extern OrderDefaultTypeInternal _Order_default_instance_;
class PostOrderRequest;
class PostOrderRequestDefaultTypeInternal;
extern PostOrderRequestDefaultTypeInternal _PostOrderRequest_default_instance_;
class PostOrderResponse;
class PostOrderResponseDefaultTypeInternal;
extern PostOrderResponseDefaultTypeInternal _PostOrderResponse_default_instance_;
}  // namespace gemini
PROTOBUF_NAMESPACE_OPEN
template<> ::gemini::DeleteOrderRequest* Arena::CreateMaybeMessage<::gemini::DeleteOrderRequest>(Arena*);
template<> ::gemini::DeleteOrderResponse* Arena::CreateMaybeMessage<::gemini::DeleteOrderResponse>(Arena*);
template<> ::gemini::FindOrderRequest* Arena::CreateMaybeMessage<::gemini::FindOrderRequest>(Arena*);
template<> ::gemini::FindOrderResponse* Arena::CreateMaybeMessage<::gemini::FindOrderResponse>(Arena*);
template<> ::gemini::ListOrderByOrdererIdRequest* Arena::CreateMaybeMessage<::gemini::ListOrderByOrdererIdRequest>(Arena*);
template<> ::gemini::ListOrderByOrdererIdResponse* Arena::CreateMaybeMessage<::gemini::ListOrderByOrdererIdResponse>(Arena*);
template<> ::gemini::ListOrderBySellerIdRequest* Arena::CreateMaybeMessage<::gemini::ListOrderBySellerIdRequest>(Arena*);
template<> ::gemini::ListOrderBySellerIdResponse* Arena::CreateMaybeMessage<::gemini::ListOrderBySellerIdResponse>(Arena*);
template<> ::gemini::Order* Arena::CreateMaybeMessage<::gemini::Order>(Arena*);
template<> ::gemini::PostOrderRequest* Arena::CreateMaybeMessage<::gemini::PostOrderRequest>(Arena*);
template<> ::gemini::PostOrderResponse* Arena::CreateMaybeMessage<::gemini::PostOrderResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gemini {

// ===================================================================

class Order :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gemini.Order) */ {
 public:
  Order();
  virtual ~Order();

  Order(const Order& from);
  Order(Order&& from) noexcept
    : Order() {
    *this = ::std::move(from);
  }

  inline Order& operator=(const Order& from) {
    CopyFrom(from);
    return *this;
  }
  inline Order& operator=(Order&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Order& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Order* internal_default_instance() {
    return reinterpret_cast<const Order*>(
               &_Order_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Order& a, Order& b) {
    a.Swap(&b);
  }
  inline void Swap(Order* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Order* New() const final {
    return CreateMaybeMessage<Order>(nullptr);
  }

  Order* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Order>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Order& from);
  void MergeFrom(const Order& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Order* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gemini.Order";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_order_2eproto);
    return ::descriptor_table_order_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kProductIdFieldNumber = 2,
    kOrdererIdFieldNumber = 3,
    kSellerIdFieldNumber = 4,
    kProductNameFieldNumber = 6,
    kOrdererNameFieldNumber = 7,
    kSellerNameFieldNumber = 8,
    kPriceFieldNumber = 5,
    kCreatedAtFieldNumber = 9,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string productId = 2;
  void clear_productid();
  const std::string& productid() const;
  void set_productid(const std::string& value);
  void set_productid(std::string&& value);
  void set_productid(const char* value);
  void set_productid(const char* value, size_t size);
  std::string* mutable_productid();
  std::string* release_productid();
  void set_allocated_productid(std::string* productid);
  private:
  const std::string& _internal_productid() const;
  void _internal_set_productid(const std::string& value);
  std::string* _internal_mutable_productid();
  public:

  // string ordererId = 3;
  void clear_ordererid();
  const std::string& ordererid() const;
  void set_ordererid(const std::string& value);
  void set_ordererid(std::string&& value);
  void set_ordererid(const char* value);
  void set_ordererid(const char* value, size_t size);
  std::string* mutable_ordererid();
  std::string* release_ordererid();
  void set_allocated_ordererid(std::string* ordererid);
  private:
  const std::string& _internal_ordererid() const;
  void _internal_set_ordererid(const std::string& value);
  std::string* _internal_mutable_ordererid();
  public:

  // string sellerId = 4;
  void clear_sellerid();
  const std::string& sellerid() const;
  void set_sellerid(const std::string& value);
  void set_sellerid(std::string&& value);
  void set_sellerid(const char* value);
  void set_sellerid(const char* value, size_t size);
  std::string* mutable_sellerid();
  std::string* release_sellerid();
  void set_allocated_sellerid(std::string* sellerid);
  private:
  const std::string& _internal_sellerid() const;
  void _internal_set_sellerid(const std::string& value);
  std::string* _internal_mutable_sellerid();
  public:

  // string productName = 6;
  void clear_productname();
  const std::string& productname() const;
  void set_productname(const std::string& value);
  void set_productname(std::string&& value);
  void set_productname(const char* value);
  void set_productname(const char* value, size_t size);
  std::string* mutable_productname();
  std::string* release_productname();
  void set_allocated_productname(std::string* productname);
  private:
  const std::string& _internal_productname() const;
  void _internal_set_productname(const std::string& value);
  std::string* _internal_mutable_productname();
  public:

  // string ordererName = 7;
  void clear_orderername();
  const std::string& orderername() const;
  void set_orderername(const std::string& value);
  void set_orderername(std::string&& value);
  void set_orderername(const char* value);
  void set_orderername(const char* value, size_t size);
  std::string* mutable_orderername();
  std::string* release_orderername();
  void set_allocated_orderername(std::string* orderername);
  private:
  const std::string& _internal_orderername() const;
  void _internal_set_orderername(const std::string& value);
  std::string* _internal_mutable_orderername();
  public:

  // string sellerName = 8;
  void clear_sellername();
  const std::string& sellername() const;
  void set_sellername(const std::string& value);
  void set_sellername(std::string&& value);
  void set_sellername(const char* value);
  void set_sellername(const char* value, size_t size);
  std::string* mutable_sellername();
  std::string* release_sellername();
  void set_allocated_sellername(std::string* sellername);
  private:
  const std::string& _internal_sellername() const;
  void _internal_set_sellername(const std::string& value);
  std::string* _internal_mutable_sellername();
  public:

  // int64 price = 5;
  void clear_price();
  ::PROTOBUF_NAMESPACE_ID::int64 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_price() const;
  void _internal_set_price(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 createdAt = 9;
  void clear_createdat();
  ::PROTOBUF_NAMESPACE_ID::int64 createdat() const;
  void set_createdat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_createdat() const;
  void _internal_set_createdat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:gemini.Order)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr productid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ordererid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sellerid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr productname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orderername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sellername_;
  ::PROTOBUF_NAMESPACE_ID::int64 price_;
  ::PROTOBUF_NAMESPACE_ID::int64 createdat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_2eproto;
};
// -------------------------------------------------------------------

class PostOrderRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gemini.PostOrderRequest) */ {
 public:
  PostOrderRequest();
  virtual ~PostOrderRequest();

  PostOrderRequest(const PostOrderRequest& from);
  PostOrderRequest(PostOrderRequest&& from) noexcept
    : PostOrderRequest() {
    *this = ::std::move(from);
  }

  inline PostOrderRequest& operator=(const PostOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostOrderRequest& operator=(PostOrderRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostOrderRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostOrderRequest* internal_default_instance() {
    return reinterpret_cast<const PostOrderRequest*>(
               &_PostOrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PostOrderRequest& a, PostOrderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostOrderRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostOrderRequest* New() const final {
    return CreateMaybeMessage<PostOrderRequest>(nullptr);
  }

  PostOrderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostOrderRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostOrderRequest& from);
  void MergeFrom(const PostOrderRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostOrderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gemini.PostOrderRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_order_2eproto);
    return ::descriptor_table_order_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProductIdFieldNumber = 1,
    kOrdererIdFieldNumber = 2,
  };
  // string productId = 1;
  void clear_productid();
  const std::string& productid() const;
  void set_productid(const std::string& value);
  void set_productid(std::string&& value);
  void set_productid(const char* value);
  void set_productid(const char* value, size_t size);
  std::string* mutable_productid();
  std::string* release_productid();
  void set_allocated_productid(std::string* productid);
  private:
  const std::string& _internal_productid() const;
  void _internal_set_productid(const std::string& value);
  std::string* _internal_mutable_productid();
  public:

  // string ordererId = 2;
  void clear_ordererid();
  const std::string& ordererid() const;
  void set_ordererid(const std::string& value);
  void set_ordererid(std::string&& value);
  void set_ordererid(const char* value);
  void set_ordererid(const char* value, size_t size);
  std::string* mutable_ordererid();
  std::string* release_ordererid();
  void set_allocated_ordererid(std::string* ordererid);
  private:
  const std::string& _internal_ordererid() const;
  void _internal_set_ordererid(const std::string& value);
  std::string* _internal_mutable_ordererid();
  public:

  // @@protoc_insertion_point(class_scope:gemini.PostOrderRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr productid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ordererid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_2eproto;
};
// -------------------------------------------------------------------

class ListOrderBySellerIdRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gemini.ListOrderBySellerIdRequest) */ {
 public:
  ListOrderBySellerIdRequest();
  virtual ~ListOrderBySellerIdRequest();

  ListOrderBySellerIdRequest(const ListOrderBySellerIdRequest& from);
  ListOrderBySellerIdRequest(ListOrderBySellerIdRequest&& from) noexcept
    : ListOrderBySellerIdRequest() {
    *this = ::std::move(from);
  }

  inline ListOrderBySellerIdRequest& operator=(const ListOrderBySellerIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListOrderBySellerIdRequest& operator=(ListOrderBySellerIdRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListOrderBySellerIdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListOrderBySellerIdRequest* internal_default_instance() {
    return reinterpret_cast<const ListOrderBySellerIdRequest*>(
               &_ListOrderBySellerIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListOrderBySellerIdRequest& a, ListOrderBySellerIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListOrderBySellerIdRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListOrderBySellerIdRequest* New() const final {
    return CreateMaybeMessage<ListOrderBySellerIdRequest>(nullptr);
  }

  ListOrderBySellerIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListOrderBySellerIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListOrderBySellerIdRequest& from);
  void MergeFrom(const ListOrderBySellerIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListOrderBySellerIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gemini.ListOrderBySellerIdRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_order_2eproto);
    return ::descriptor_table_order_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProductIdFieldNumber = 1,
  };
  // string productId = 1;
  void clear_productid();
  const std::string& productid() const;
  void set_productid(const std::string& value);
  void set_productid(std::string&& value);
  void set_productid(const char* value);
  void set_productid(const char* value, size_t size);
  std::string* mutable_productid();
  std::string* release_productid();
  void set_allocated_productid(std::string* productid);
  private:
  const std::string& _internal_productid() const;
  void _internal_set_productid(const std::string& value);
  std::string* _internal_mutable_productid();
  public:

  // @@protoc_insertion_point(class_scope:gemini.ListOrderBySellerIdRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr productid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_2eproto;
};
// -------------------------------------------------------------------

class ListOrderByOrdererIdRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gemini.ListOrderByOrdererIdRequest) */ {
 public:
  ListOrderByOrdererIdRequest();
  virtual ~ListOrderByOrdererIdRequest();

  ListOrderByOrdererIdRequest(const ListOrderByOrdererIdRequest& from);
  ListOrderByOrdererIdRequest(ListOrderByOrdererIdRequest&& from) noexcept
    : ListOrderByOrdererIdRequest() {
    *this = ::std::move(from);
  }

  inline ListOrderByOrdererIdRequest& operator=(const ListOrderByOrdererIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListOrderByOrdererIdRequest& operator=(ListOrderByOrdererIdRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListOrderByOrdererIdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListOrderByOrdererIdRequest* internal_default_instance() {
    return reinterpret_cast<const ListOrderByOrdererIdRequest*>(
               &_ListOrderByOrdererIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListOrderByOrdererIdRequest& a, ListOrderByOrdererIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListOrderByOrdererIdRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListOrderByOrdererIdRequest* New() const final {
    return CreateMaybeMessage<ListOrderByOrdererIdRequest>(nullptr);
  }

  ListOrderByOrdererIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListOrderByOrdererIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListOrderByOrdererIdRequest& from);
  void MergeFrom(const ListOrderByOrdererIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListOrderByOrdererIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gemini.ListOrderByOrdererIdRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_order_2eproto);
    return ::descriptor_table_order_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrdererIdFieldNumber = 1,
  };
  // string ordererId = 1;
  void clear_ordererid();
  const std::string& ordererid() const;
  void set_ordererid(const std::string& value);
  void set_ordererid(std::string&& value);
  void set_ordererid(const char* value);
  void set_ordererid(const char* value, size_t size);
  std::string* mutable_ordererid();
  std::string* release_ordererid();
  void set_allocated_ordererid(std::string* ordererid);
  private:
  const std::string& _internal_ordererid() const;
  void _internal_set_ordererid(const std::string& value);
  std::string* _internal_mutable_ordererid();
  public:

  // @@protoc_insertion_point(class_scope:gemini.ListOrderByOrdererIdRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ordererid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_2eproto;
};
// -------------------------------------------------------------------

class FindOrderRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gemini.FindOrderRequest) */ {
 public:
  FindOrderRequest();
  virtual ~FindOrderRequest();

  FindOrderRequest(const FindOrderRequest& from);
  FindOrderRequest(FindOrderRequest&& from) noexcept
    : FindOrderRequest() {
    *this = ::std::move(from);
  }

  inline FindOrderRequest& operator=(const FindOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindOrderRequest& operator=(FindOrderRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindOrderRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FindOrderRequest* internal_default_instance() {
    return reinterpret_cast<const FindOrderRequest*>(
               &_FindOrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FindOrderRequest& a, FindOrderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FindOrderRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindOrderRequest* New() const final {
    return CreateMaybeMessage<FindOrderRequest>(nullptr);
  }

  FindOrderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindOrderRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindOrderRequest& from);
  void MergeFrom(const FindOrderRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindOrderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gemini.FindOrderRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_order_2eproto);
    return ::descriptor_table_order_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:gemini.FindOrderRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_2eproto;
};
// -------------------------------------------------------------------

class DeleteOrderRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gemini.DeleteOrderRequest) */ {
 public:
  DeleteOrderRequest();
  virtual ~DeleteOrderRequest();

  DeleteOrderRequest(const DeleteOrderRequest& from);
  DeleteOrderRequest(DeleteOrderRequest&& from) noexcept
    : DeleteOrderRequest() {
    *this = ::std::move(from);
  }

  inline DeleteOrderRequest& operator=(const DeleteOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteOrderRequest& operator=(DeleteOrderRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteOrderRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteOrderRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteOrderRequest*>(
               &_DeleteOrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeleteOrderRequest& a, DeleteOrderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteOrderRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteOrderRequest* New() const final {
    return CreateMaybeMessage<DeleteOrderRequest>(nullptr);
  }

  DeleteOrderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteOrderRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteOrderRequest& from);
  void MergeFrom(const DeleteOrderRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteOrderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gemini.DeleteOrderRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_order_2eproto);
    return ::descriptor_table_order_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:gemini.DeleteOrderRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_2eproto;
};
// -------------------------------------------------------------------

class PostOrderResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gemini.PostOrderResponse) */ {
 public:
  PostOrderResponse();
  virtual ~PostOrderResponse();

  PostOrderResponse(const PostOrderResponse& from);
  PostOrderResponse(PostOrderResponse&& from) noexcept
    : PostOrderResponse() {
    *this = ::std::move(from);
  }

  inline PostOrderResponse& operator=(const PostOrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostOrderResponse& operator=(PostOrderResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostOrderResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostOrderResponse* internal_default_instance() {
    return reinterpret_cast<const PostOrderResponse*>(
               &_PostOrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PostOrderResponse& a, PostOrderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PostOrderResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostOrderResponse* New() const final {
    return CreateMaybeMessage<PostOrderResponse>(nullptr);
  }

  PostOrderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostOrderResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostOrderResponse& from);
  void MergeFrom(const PostOrderResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostOrderResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gemini.PostOrderResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_order_2eproto);
    return ::descriptor_table_order_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderFieldNumber = 1,
  };
  // .gemini.Order order = 1;
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  const ::gemini::Order& order() const;
  ::gemini::Order* release_order();
  ::gemini::Order* mutable_order();
  void set_allocated_order(::gemini::Order* order);
  private:
  const ::gemini::Order& _internal_order() const;
  ::gemini::Order* _internal_mutable_order();
  public:

  // @@protoc_insertion_point(class_scope:gemini.PostOrderResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gemini::Order* order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_2eproto;
};
// -------------------------------------------------------------------

class ListOrderBySellerIdResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gemini.ListOrderBySellerIdResponse) */ {
 public:
  ListOrderBySellerIdResponse();
  virtual ~ListOrderBySellerIdResponse();

  ListOrderBySellerIdResponse(const ListOrderBySellerIdResponse& from);
  ListOrderBySellerIdResponse(ListOrderBySellerIdResponse&& from) noexcept
    : ListOrderBySellerIdResponse() {
    *this = ::std::move(from);
  }

  inline ListOrderBySellerIdResponse& operator=(const ListOrderBySellerIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListOrderBySellerIdResponse& operator=(ListOrderBySellerIdResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListOrderBySellerIdResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListOrderBySellerIdResponse* internal_default_instance() {
    return reinterpret_cast<const ListOrderBySellerIdResponse*>(
               &_ListOrderBySellerIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ListOrderBySellerIdResponse& a, ListOrderBySellerIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListOrderBySellerIdResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListOrderBySellerIdResponse* New() const final {
    return CreateMaybeMessage<ListOrderBySellerIdResponse>(nullptr);
  }

  ListOrderBySellerIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListOrderBySellerIdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListOrderBySellerIdResponse& from);
  void MergeFrom(const ListOrderBySellerIdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListOrderBySellerIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gemini.ListOrderBySellerIdResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_order_2eproto);
    return ::descriptor_table_order_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderFieldNumber = 1,
  };
  // .gemini.Order order = 1;
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  const ::gemini::Order& order() const;
  ::gemini::Order* release_order();
  ::gemini::Order* mutable_order();
  void set_allocated_order(::gemini::Order* order);
  private:
  const ::gemini::Order& _internal_order() const;
  ::gemini::Order* _internal_mutable_order();
  public:

  // @@protoc_insertion_point(class_scope:gemini.ListOrderBySellerIdResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gemini::Order* order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_2eproto;
};
// -------------------------------------------------------------------

class ListOrderByOrdererIdResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gemini.ListOrderByOrdererIdResponse) */ {
 public:
  ListOrderByOrdererIdResponse();
  virtual ~ListOrderByOrdererIdResponse();

  ListOrderByOrdererIdResponse(const ListOrderByOrdererIdResponse& from);
  ListOrderByOrdererIdResponse(ListOrderByOrdererIdResponse&& from) noexcept
    : ListOrderByOrdererIdResponse() {
    *this = ::std::move(from);
  }

  inline ListOrderByOrdererIdResponse& operator=(const ListOrderByOrdererIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListOrderByOrdererIdResponse& operator=(ListOrderByOrdererIdResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListOrderByOrdererIdResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListOrderByOrdererIdResponse* internal_default_instance() {
    return reinterpret_cast<const ListOrderByOrdererIdResponse*>(
               &_ListOrderByOrdererIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ListOrderByOrdererIdResponse& a, ListOrderByOrdererIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListOrderByOrdererIdResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListOrderByOrdererIdResponse* New() const final {
    return CreateMaybeMessage<ListOrderByOrdererIdResponse>(nullptr);
  }

  ListOrderByOrdererIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListOrderByOrdererIdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListOrderByOrdererIdResponse& from);
  void MergeFrom(const ListOrderByOrdererIdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListOrderByOrdererIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gemini.ListOrderByOrdererIdResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_order_2eproto);
    return ::descriptor_table_order_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderFieldNumber = 1,
  };
  // .gemini.Order order = 1;
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  const ::gemini::Order& order() const;
  ::gemini::Order* release_order();
  ::gemini::Order* mutable_order();
  void set_allocated_order(::gemini::Order* order);
  private:
  const ::gemini::Order& _internal_order() const;
  ::gemini::Order* _internal_mutable_order();
  public:

  // @@protoc_insertion_point(class_scope:gemini.ListOrderByOrdererIdResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gemini::Order* order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_2eproto;
};
// -------------------------------------------------------------------

class FindOrderResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gemini.FindOrderResponse) */ {
 public:
  FindOrderResponse();
  virtual ~FindOrderResponse();

  FindOrderResponse(const FindOrderResponse& from);
  FindOrderResponse(FindOrderResponse&& from) noexcept
    : FindOrderResponse() {
    *this = ::std::move(from);
  }

  inline FindOrderResponse& operator=(const FindOrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindOrderResponse& operator=(FindOrderResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindOrderResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FindOrderResponse* internal_default_instance() {
    return reinterpret_cast<const FindOrderResponse*>(
               &_FindOrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(FindOrderResponse& a, FindOrderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FindOrderResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindOrderResponse* New() const final {
    return CreateMaybeMessage<FindOrderResponse>(nullptr);
  }

  FindOrderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindOrderResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindOrderResponse& from);
  void MergeFrom(const FindOrderResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindOrderResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gemini.FindOrderResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_order_2eproto);
    return ::descriptor_table_order_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderFieldNumber = 1,
  };
  // .gemini.Order order = 1;
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  const ::gemini::Order& order() const;
  ::gemini::Order* release_order();
  ::gemini::Order* mutable_order();
  void set_allocated_order(::gemini::Order* order);
  private:
  const ::gemini::Order& _internal_order() const;
  ::gemini::Order* _internal_mutable_order();
  public:

  // @@protoc_insertion_point(class_scope:gemini.FindOrderResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::gemini::Order* order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_2eproto;
};
// -------------------------------------------------------------------

class DeleteOrderResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gemini.DeleteOrderResponse) */ {
 public:
  DeleteOrderResponse();
  virtual ~DeleteOrderResponse();

  DeleteOrderResponse(const DeleteOrderResponse& from);
  DeleteOrderResponse(DeleteOrderResponse&& from) noexcept
    : DeleteOrderResponse() {
    *this = ::std::move(from);
  }

  inline DeleteOrderResponse& operator=(const DeleteOrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteOrderResponse& operator=(DeleteOrderResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteOrderResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteOrderResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteOrderResponse*>(
               &_DeleteOrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DeleteOrderResponse& a, DeleteOrderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteOrderResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteOrderResponse* New() const final {
    return CreateMaybeMessage<DeleteOrderResponse>(nullptr);
  }

  DeleteOrderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteOrderResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteOrderResponse& from);
  void MergeFrom(const DeleteOrderResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteOrderResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gemini.DeleteOrderResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_order_2eproto);
    return ::descriptor_table_order_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gemini.DeleteOrderResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Order

// string id = 1;
inline void Order::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Order::id() const {
  // @@protoc_insertion_point(field_get:gemini.Order.id)
  return _internal_id();
}
inline void Order::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:gemini.Order.id)
}
inline std::string* Order::mutable_id() {
  // @@protoc_insertion_point(field_mutable:gemini.Order.id)
  return _internal_mutable_id();
}
inline const std::string& Order::_internal_id() const {
  return id_.GetNoArena();
}
inline void Order::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Order::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gemini.Order.id)
}
inline void Order::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gemini.Order.id)
}
inline void Order::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gemini.Order.id)
}
inline std::string* Order::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Order::release_id() {
  // @@protoc_insertion_point(field_release:gemini.Order.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:gemini.Order.id)
}

// string productId = 2;
inline void Order::clear_productid() {
  productid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Order::productid() const {
  // @@protoc_insertion_point(field_get:gemini.Order.productId)
  return _internal_productid();
}
inline void Order::set_productid(const std::string& value) {
  _internal_set_productid(value);
  // @@protoc_insertion_point(field_set:gemini.Order.productId)
}
inline std::string* Order::mutable_productid() {
  // @@protoc_insertion_point(field_mutable:gemini.Order.productId)
  return _internal_mutable_productid();
}
inline const std::string& Order::_internal_productid() const {
  return productid_.GetNoArena();
}
inline void Order::_internal_set_productid(const std::string& value) {
  
  productid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Order::set_productid(std::string&& value) {
  
  productid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gemini.Order.productId)
}
inline void Order::set_productid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  productid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gemini.Order.productId)
}
inline void Order::set_productid(const char* value, size_t size) {
  
  productid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gemini.Order.productId)
}
inline std::string* Order::_internal_mutable_productid() {
  
  return productid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Order::release_productid() {
  // @@protoc_insertion_point(field_release:gemini.Order.productId)
  
  return productid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_productid(std::string* productid) {
  if (productid != nullptr) {
    
  } else {
    
  }
  productid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), productid);
  // @@protoc_insertion_point(field_set_allocated:gemini.Order.productId)
}

// string ordererId = 3;
inline void Order::clear_ordererid() {
  ordererid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Order::ordererid() const {
  // @@protoc_insertion_point(field_get:gemini.Order.ordererId)
  return _internal_ordererid();
}
inline void Order::set_ordererid(const std::string& value) {
  _internal_set_ordererid(value);
  // @@protoc_insertion_point(field_set:gemini.Order.ordererId)
}
inline std::string* Order::mutable_ordererid() {
  // @@protoc_insertion_point(field_mutable:gemini.Order.ordererId)
  return _internal_mutable_ordererid();
}
inline const std::string& Order::_internal_ordererid() const {
  return ordererid_.GetNoArena();
}
inline void Order::_internal_set_ordererid(const std::string& value) {
  
  ordererid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Order::set_ordererid(std::string&& value) {
  
  ordererid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gemini.Order.ordererId)
}
inline void Order::set_ordererid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ordererid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gemini.Order.ordererId)
}
inline void Order::set_ordererid(const char* value, size_t size) {
  
  ordererid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gemini.Order.ordererId)
}
inline std::string* Order::_internal_mutable_ordererid() {
  
  return ordererid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Order::release_ordererid() {
  // @@protoc_insertion_point(field_release:gemini.Order.ordererId)
  
  return ordererid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_ordererid(std::string* ordererid) {
  if (ordererid != nullptr) {
    
  } else {
    
  }
  ordererid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ordererid);
  // @@protoc_insertion_point(field_set_allocated:gemini.Order.ordererId)
}

// string sellerId = 4;
inline void Order::clear_sellerid() {
  sellerid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Order::sellerid() const {
  // @@protoc_insertion_point(field_get:gemini.Order.sellerId)
  return _internal_sellerid();
}
inline void Order::set_sellerid(const std::string& value) {
  _internal_set_sellerid(value);
  // @@protoc_insertion_point(field_set:gemini.Order.sellerId)
}
inline std::string* Order::mutable_sellerid() {
  // @@protoc_insertion_point(field_mutable:gemini.Order.sellerId)
  return _internal_mutable_sellerid();
}
inline const std::string& Order::_internal_sellerid() const {
  return sellerid_.GetNoArena();
}
inline void Order::_internal_set_sellerid(const std::string& value) {
  
  sellerid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Order::set_sellerid(std::string&& value) {
  
  sellerid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gemini.Order.sellerId)
}
inline void Order::set_sellerid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sellerid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gemini.Order.sellerId)
}
inline void Order::set_sellerid(const char* value, size_t size) {
  
  sellerid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gemini.Order.sellerId)
}
inline std::string* Order::_internal_mutable_sellerid() {
  
  return sellerid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Order::release_sellerid() {
  // @@protoc_insertion_point(field_release:gemini.Order.sellerId)
  
  return sellerid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_sellerid(std::string* sellerid) {
  if (sellerid != nullptr) {
    
  } else {
    
  }
  sellerid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sellerid);
  // @@protoc_insertion_point(field_set_allocated:gemini.Order.sellerId)
}

// int64 price = 5;
inline void Order::clear_price() {
  price_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Order::_internal_price() const {
  return price_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Order::price() const {
  // @@protoc_insertion_point(field_get:gemini.Order.price)
  return _internal_price();
}
inline void Order::_internal_set_price(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  price_ = value;
}
inline void Order::set_price(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:gemini.Order.price)
}

// string productName = 6;
inline void Order::clear_productname() {
  productname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Order::productname() const {
  // @@protoc_insertion_point(field_get:gemini.Order.productName)
  return _internal_productname();
}
inline void Order::set_productname(const std::string& value) {
  _internal_set_productname(value);
  // @@protoc_insertion_point(field_set:gemini.Order.productName)
}
inline std::string* Order::mutable_productname() {
  // @@protoc_insertion_point(field_mutable:gemini.Order.productName)
  return _internal_mutable_productname();
}
inline const std::string& Order::_internal_productname() const {
  return productname_.GetNoArena();
}
inline void Order::_internal_set_productname(const std::string& value) {
  
  productname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Order::set_productname(std::string&& value) {
  
  productname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gemini.Order.productName)
}
inline void Order::set_productname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  productname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gemini.Order.productName)
}
inline void Order::set_productname(const char* value, size_t size) {
  
  productname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gemini.Order.productName)
}
inline std::string* Order::_internal_mutable_productname() {
  
  return productname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Order::release_productname() {
  // @@protoc_insertion_point(field_release:gemini.Order.productName)
  
  return productname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_productname(std::string* productname) {
  if (productname != nullptr) {
    
  } else {
    
  }
  productname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), productname);
  // @@protoc_insertion_point(field_set_allocated:gemini.Order.productName)
}

// string ordererName = 7;
inline void Order::clear_orderername() {
  orderername_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Order::orderername() const {
  // @@protoc_insertion_point(field_get:gemini.Order.ordererName)
  return _internal_orderername();
}
inline void Order::set_orderername(const std::string& value) {
  _internal_set_orderername(value);
  // @@protoc_insertion_point(field_set:gemini.Order.ordererName)
}
inline std::string* Order::mutable_orderername() {
  // @@protoc_insertion_point(field_mutable:gemini.Order.ordererName)
  return _internal_mutable_orderername();
}
inline const std::string& Order::_internal_orderername() const {
  return orderername_.GetNoArena();
}
inline void Order::_internal_set_orderername(const std::string& value) {
  
  orderername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Order::set_orderername(std::string&& value) {
  
  orderername_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gemini.Order.ordererName)
}
inline void Order::set_orderername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  orderername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gemini.Order.ordererName)
}
inline void Order::set_orderername(const char* value, size_t size) {
  
  orderername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gemini.Order.ordererName)
}
inline std::string* Order::_internal_mutable_orderername() {
  
  return orderername_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Order::release_orderername() {
  // @@protoc_insertion_point(field_release:gemini.Order.ordererName)
  
  return orderername_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_orderername(std::string* orderername) {
  if (orderername != nullptr) {
    
  } else {
    
  }
  orderername_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), orderername);
  // @@protoc_insertion_point(field_set_allocated:gemini.Order.ordererName)
}

// string sellerName = 8;
inline void Order::clear_sellername() {
  sellername_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Order::sellername() const {
  // @@protoc_insertion_point(field_get:gemini.Order.sellerName)
  return _internal_sellername();
}
inline void Order::set_sellername(const std::string& value) {
  _internal_set_sellername(value);
  // @@protoc_insertion_point(field_set:gemini.Order.sellerName)
}
inline std::string* Order::mutable_sellername() {
  // @@protoc_insertion_point(field_mutable:gemini.Order.sellerName)
  return _internal_mutable_sellername();
}
inline const std::string& Order::_internal_sellername() const {
  return sellername_.GetNoArena();
}
inline void Order::_internal_set_sellername(const std::string& value) {
  
  sellername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Order::set_sellername(std::string&& value) {
  
  sellername_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gemini.Order.sellerName)
}
inline void Order::set_sellername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sellername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gemini.Order.sellerName)
}
inline void Order::set_sellername(const char* value, size_t size) {
  
  sellername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gemini.Order.sellerName)
}
inline std::string* Order::_internal_mutable_sellername() {
  
  return sellername_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Order::release_sellername() {
  // @@protoc_insertion_point(field_release:gemini.Order.sellerName)
  
  return sellername_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_sellername(std::string* sellername) {
  if (sellername != nullptr) {
    
  } else {
    
  }
  sellername_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sellername);
  // @@protoc_insertion_point(field_set_allocated:gemini.Order.sellerName)
}

// int64 createdAt = 9;
inline void Order::clear_createdat() {
  createdat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Order::_internal_createdat() const {
  return createdat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Order::createdat() const {
  // @@protoc_insertion_point(field_get:gemini.Order.createdAt)
  return _internal_createdat();
}
inline void Order::_internal_set_createdat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  createdat_ = value;
}
inline void Order::set_createdat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_createdat(value);
  // @@protoc_insertion_point(field_set:gemini.Order.createdAt)
}

// -------------------------------------------------------------------

// PostOrderRequest

// string productId = 1;
inline void PostOrderRequest::clear_productid() {
  productid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PostOrderRequest::productid() const {
  // @@protoc_insertion_point(field_get:gemini.PostOrderRequest.productId)
  return _internal_productid();
}
inline void PostOrderRequest::set_productid(const std::string& value) {
  _internal_set_productid(value);
  // @@protoc_insertion_point(field_set:gemini.PostOrderRequest.productId)
}
inline std::string* PostOrderRequest::mutable_productid() {
  // @@protoc_insertion_point(field_mutable:gemini.PostOrderRequest.productId)
  return _internal_mutable_productid();
}
inline const std::string& PostOrderRequest::_internal_productid() const {
  return productid_.GetNoArena();
}
inline void PostOrderRequest::_internal_set_productid(const std::string& value) {
  
  productid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PostOrderRequest::set_productid(std::string&& value) {
  
  productid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gemini.PostOrderRequest.productId)
}
inline void PostOrderRequest::set_productid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  productid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gemini.PostOrderRequest.productId)
}
inline void PostOrderRequest::set_productid(const char* value, size_t size) {
  
  productid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gemini.PostOrderRequest.productId)
}
inline std::string* PostOrderRequest::_internal_mutable_productid() {
  
  return productid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PostOrderRequest::release_productid() {
  // @@protoc_insertion_point(field_release:gemini.PostOrderRequest.productId)
  
  return productid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PostOrderRequest::set_allocated_productid(std::string* productid) {
  if (productid != nullptr) {
    
  } else {
    
  }
  productid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), productid);
  // @@protoc_insertion_point(field_set_allocated:gemini.PostOrderRequest.productId)
}

// string ordererId = 2;
inline void PostOrderRequest::clear_ordererid() {
  ordererid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PostOrderRequest::ordererid() const {
  // @@protoc_insertion_point(field_get:gemini.PostOrderRequest.ordererId)
  return _internal_ordererid();
}
inline void PostOrderRequest::set_ordererid(const std::string& value) {
  _internal_set_ordererid(value);
  // @@protoc_insertion_point(field_set:gemini.PostOrderRequest.ordererId)
}
inline std::string* PostOrderRequest::mutable_ordererid() {
  // @@protoc_insertion_point(field_mutable:gemini.PostOrderRequest.ordererId)
  return _internal_mutable_ordererid();
}
inline const std::string& PostOrderRequest::_internal_ordererid() const {
  return ordererid_.GetNoArena();
}
inline void PostOrderRequest::_internal_set_ordererid(const std::string& value) {
  
  ordererid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PostOrderRequest::set_ordererid(std::string&& value) {
  
  ordererid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gemini.PostOrderRequest.ordererId)
}
inline void PostOrderRequest::set_ordererid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ordererid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gemini.PostOrderRequest.ordererId)
}
inline void PostOrderRequest::set_ordererid(const char* value, size_t size) {
  
  ordererid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gemini.PostOrderRequest.ordererId)
}
inline std::string* PostOrderRequest::_internal_mutable_ordererid() {
  
  return ordererid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PostOrderRequest::release_ordererid() {
  // @@protoc_insertion_point(field_release:gemini.PostOrderRequest.ordererId)
  
  return ordererid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PostOrderRequest::set_allocated_ordererid(std::string* ordererid) {
  if (ordererid != nullptr) {
    
  } else {
    
  }
  ordererid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ordererid);
  // @@protoc_insertion_point(field_set_allocated:gemini.PostOrderRequest.ordererId)
}

// -------------------------------------------------------------------

// ListOrderBySellerIdRequest

// string productId = 1;
inline void ListOrderBySellerIdRequest::clear_productid() {
  productid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListOrderBySellerIdRequest::productid() const {
  // @@protoc_insertion_point(field_get:gemini.ListOrderBySellerIdRequest.productId)
  return _internal_productid();
}
inline void ListOrderBySellerIdRequest::set_productid(const std::string& value) {
  _internal_set_productid(value);
  // @@protoc_insertion_point(field_set:gemini.ListOrderBySellerIdRequest.productId)
}
inline std::string* ListOrderBySellerIdRequest::mutable_productid() {
  // @@protoc_insertion_point(field_mutable:gemini.ListOrderBySellerIdRequest.productId)
  return _internal_mutable_productid();
}
inline const std::string& ListOrderBySellerIdRequest::_internal_productid() const {
  return productid_.GetNoArena();
}
inline void ListOrderBySellerIdRequest::_internal_set_productid(const std::string& value) {
  
  productid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListOrderBySellerIdRequest::set_productid(std::string&& value) {
  
  productid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gemini.ListOrderBySellerIdRequest.productId)
}
inline void ListOrderBySellerIdRequest::set_productid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  productid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gemini.ListOrderBySellerIdRequest.productId)
}
inline void ListOrderBySellerIdRequest::set_productid(const char* value, size_t size) {
  
  productid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gemini.ListOrderBySellerIdRequest.productId)
}
inline std::string* ListOrderBySellerIdRequest::_internal_mutable_productid() {
  
  return productid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListOrderBySellerIdRequest::release_productid() {
  // @@protoc_insertion_point(field_release:gemini.ListOrderBySellerIdRequest.productId)
  
  return productid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListOrderBySellerIdRequest::set_allocated_productid(std::string* productid) {
  if (productid != nullptr) {
    
  } else {
    
  }
  productid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), productid);
  // @@protoc_insertion_point(field_set_allocated:gemini.ListOrderBySellerIdRequest.productId)
}

// -------------------------------------------------------------------

// ListOrderByOrdererIdRequest

// string ordererId = 1;
inline void ListOrderByOrdererIdRequest::clear_ordererid() {
  ordererid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListOrderByOrdererIdRequest::ordererid() const {
  // @@protoc_insertion_point(field_get:gemini.ListOrderByOrdererIdRequest.ordererId)
  return _internal_ordererid();
}
inline void ListOrderByOrdererIdRequest::set_ordererid(const std::string& value) {
  _internal_set_ordererid(value);
  // @@protoc_insertion_point(field_set:gemini.ListOrderByOrdererIdRequest.ordererId)
}
inline std::string* ListOrderByOrdererIdRequest::mutable_ordererid() {
  // @@protoc_insertion_point(field_mutable:gemini.ListOrderByOrdererIdRequest.ordererId)
  return _internal_mutable_ordererid();
}
inline const std::string& ListOrderByOrdererIdRequest::_internal_ordererid() const {
  return ordererid_.GetNoArena();
}
inline void ListOrderByOrdererIdRequest::_internal_set_ordererid(const std::string& value) {
  
  ordererid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListOrderByOrdererIdRequest::set_ordererid(std::string&& value) {
  
  ordererid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gemini.ListOrderByOrdererIdRequest.ordererId)
}
inline void ListOrderByOrdererIdRequest::set_ordererid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ordererid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gemini.ListOrderByOrdererIdRequest.ordererId)
}
inline void ListOrderByOrdererIdRequest::set_ordererid(const char* value, size_t size) {
  
  ordererid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gemini.ListOrderByOrdererIdRequest.ordererId)
}
inline std::string* ListOrderByOrdererIdRequest::_internal_mutable_ordererid() {
  
  return ordererid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListOrderByOrdererIdRequest::release_ordererid() {
  // @@protoc_insertion_point(field_release:gemini.ListOrderByOrdererIdRequest.ordererId)
  
  return ordererid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListOrderByOrdererIdRequest::set_allocated_ordererid(std::string* ordererid) {
  if (ordererid != nullptr) {
    
  } else {
    
  }
  ordererid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ordererid);
  // @@protoc_insertion_point(field_set_allocated:gemini.ListOrderByOrdererIdRequest.ordererId)
}

// -------------------------------------------------------------------

// FindOrderRequest

// string id = 1;
inline void FindOrderRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FindOrderRequest::id() const {
  // @@protoc_insertion_point(field_get:gemini.FindOrderRequest.id)
  return _internal_id();
}
inline void FindOrderRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:gemini.FindOrderRequest.id)
}
inline std::string* FindOrderRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:gemini.FindOrderRequest.id)
  return _internal_mutable_id();
}
inline const std::string& FindOrderRequest::_internal_id() const {
  return id_.GetNoArena();
}
inline void FindOrderRequest::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FindOrderRequest::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gemini.FindOrderRequest.id)
}
inline void FindOrderRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gemini.FindOrderRequest.id)
}
inline void FindOrderRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gemini.FindOrderRequest.id)
}
inline std::string* FindOrderRequest::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FindOrderRequest::release_id() {
  // @@protoc_insertion_point(field_release:gemini.FindOrderRequest.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FindOrderRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:gemini.FindOrderRequest.id)
}

// -------------------------------------------------------------------

// DeleteOrderRequest

// string id = 1;
inline void DeleteOrderRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeleteOrderRequest::id() const {
  // @@protoc_insertion_point(field_get:gemini.DeleteOrderRequest.id)
  return _internal_id();
}
inline void DeleteOrderRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:gemini.DeleteOrderRequest.id)
}
inline std::string* DeleteOrderRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:gemini.DeleteOrderRequest.id)
  return _internal_mutable_id();
}
inline const std::string& DeleteOrderRequest::_internal_id() const {
  return id_.GetNoArena();
}
inline void DeleteOrderRequest::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DeleteOrderRequest::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gemini.DeleteOrderRequest.id)
}
inline void DeleteOrderRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gemini.DeleteOrderRequest.id)
}
inline void DeleteOrderRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gemini.DeleteOrderRequest.id)
}
inline std::string* DeleteOrderRequest::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeleteOrderRequest::release_id() {
  // @@protoc_insertion_point(field_release:gemini.DeleteOrderRequest.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteOrderRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:gemini.DeleteOrderRequest.id)
}

// -------------------------------------------------------------------

// PostOrderResponse

// .gemini.Order order = 1;
inline bool PostOrderResponse::_internal_has_order() const {
  return this != internal_default_instance() && order_ != nullptr;
}
inline bool PostOrderResponse::has_order() const {
  return _internal_has_order();
}
inline void PostOrderResponse::clear_order() {
  if (GetArenaNoVirtual() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
}
inline const ::gemini::Order& PostOrderResponse::_internal_order() const {
  const ::gemini::Order* p = order_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gemini::Order*>(
      &::gemini::_Order_default_instance_);
}
inline const ::gemini::Order& PostOrderResponse::order() const {
  // @@protoc_insertion_point(field_get:gemini.PostOrderResponse.order)
  return _internal_order();
}
inline ::gemini::Order* PostOrderResponse::release_order() {
  // @@protoc_insertion_point(field_release:gemini.PostOrderResponse.order)
  
  ::gemini::Order* temp = order_;
  order_ = nullptr;
  return temp;
}
inline ::gemini::Order* PostOrderResponse::_internal_mutable_order() {
  
  if (order_ == nullptr) {
    auto* p = CreateMaybeMessage<::gemini::Order>(GetArenaNoVirtual());
    order_ = p;
  }
  return order_;
}
inline ::gemini::Order* PostOrderResponse::mutable_order() {
  // @@protoc_insertion_point(field_mutable:gemini.PostOrderResponse.order)
  return _internal_mutable_order();
}
inline void PostOrderResponse::set_allocated_order(::gemini::Order* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete order_;
  }
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }
    
  } else {
    
  }
  order_ = order;
  // @@protoc_insertion_point(field_set_allocated:gemini.PostOrderResponse.order)
}

// -------------------------------------------------------------------

// ListOrderBySellerIdResponse

// .gemini.Order order = 1;
inline bool ListOrderBySellerIdResponse::_internal_has_order() const {
  return this != internal_default_instance() && order_ != nullptr;
}
inline bool ListOrderBySellerIdResponse::has_order() const {
  return _internal_has_order();
}
inline void ListOrderBySellerIdResponse::clear_order() {
  if (GetArenaNoVirtual() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
}
inline const ::gemini::Order& ListOrderBySellerIdResponse::_internal_order() const {
  const ::gemini::Order* p = order_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gemini::Order*>(
      &::gemini::_Order_default_instance_);
}
inline const ::gemini::Order& ListOrderBySellerIdResponse::order() const {
  // @@protoc_insertion_point(field_get:gemini.ListOrderBySellerIdResponse.order)
  return _internal_order();
}
inline ::gemini::Order* ListOrderBySellerIdResponse::release_order() {
  // @@protoc_insertion_point(field_release:gemini.ListOrderBySellerIdResponse.order)
  
  ::gemini::Order* temp = order_;
  order_ = nullptr;
  return temp;
}
inline ::gemini::Order* ListOrderBySellerIdResponse::_internal_mutable_order() {
  
  if (order_ == nullptr) {
    auto* p = CreateMaybeMessage<::gemini::Order>(GetArenaNoVirtual());
    order_ = p;
  }
  return order_;
}
inline ::gemini::Order* ListOrderBySellerIdResponse::mutable_order() {
  // @@protoc_insertion_point(field_mutable:gemini.ListOrderBySellerIdResponse.order)
  return _internal_mutable_order();
}
inline void ListOrderBySellerIdResponse::set_allocated_order(::gemini::Order* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete order_;
  }
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }
    
  } else {
    
  }
  order_ = order;
  // @@protoc_insertion_point(field_set_allocated:gemini.ListOrderBySellerIdResponse.order)
}

// -------------------------------------------------------------------

// ListOrderByOrdererIdResponse

// .gemini.Order order = 1;
inline bool ListOrderByOrdererIdResponse::_internal_has_order() const {
  return this != internal_default_instance() && order_ != nullptr;
}
inline bool ListOrderByOrdererIdResponse::has_order() const {
  return _internal_has_order();
}
inline void ListOrderByOrdererIdResponse::clear_order() {
  if (GetArenaNoVirtual() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
}
inline const ::gemini::Order& ListOrderByOrdererIdResponse::_internal_order() const {
  const ::gemini::Order* p = order_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gemini::Order*>(
      &::gemini::_Order_default_instance_);
}
inline const ::gemini::Order& ListOrderByOrdererIdResponse::order() const {
  // @@protoc_insertion_point(field_get:gemini.ListOrderByOrdererIdResponse.order)
  return _internal_order();
}
inline ::gemini::Order* ListOrderByOrdererIdResponse::release_order() {
  // @@protoc_insertion_point(field_release:gemini.ListOrderByOrdererIdResponse.order)
  
  ::gemini::Order* temp = order_;
  order_ = nullptr;
  return temp;
}
inline ::gemini::Order* ListOrderByOrdererIdResponse::_internal_mutable_order() {
  
  if (order_ == nullptr) {
    auto* p = CreateMaybeMessage<::gemini::Order>(GetArenaNoVirtual());
    order_ = p;
  }
  return order_;
}
inline ::gemini::Order* ListOrderByOrdererIdResponse::mutable_order() {
  // @@protoc_insertion_point(field_mutable:gemini.ListOrderByOrdererIdResponse.order)
  return _internal_mutable_order();
}
inline void ListOrderByOrdererIdResponse::set_allocated_order(::gemini::Order* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete order_;
  }
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }
    
  } else {
    
  }
  order_ = order;
  // @@protoc_insertion_point(field_set_allocated:gemini.ListOrderByOrdererIdResponse.order)
}

// -------------------------------------------------------------------

// FindOrderResponse

// .gemini.Order order = 1;
inline bool FindOrderResponse::_internal_has_order() const {
  return this != internal_default_instance() && order_ != nullptr;
}
inline bool FindOrderResponse::has_order() const {
  return _internal_has_order();
}
inline void FindOrderResponse::clear_order() {
  if (GetArenaNoVirtual() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
}
inline const ::gemini::Order& FindOrderResponse::_internal_order() const {
  const ::gemini::Order* p = order_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gemini::Order*>(
      &::gemini::_Order_default_instance_);
}
inline const ::gemini::Order& FindOrderResponse::order() const {
  // @@protoc_insertion_point(field_get:gemini.FindOrderResponse.order)
  return _internal_order();
}
inline ::gemini::Order* FindOrderResponse::release_order() {
  // @@protoc_insertion_point(field_release:gemini.FindOrderResponse.order)
  
  ::gemini::Order* temp = order_;
  order_ = nullptr;
  return temp;
}
inline ::gemini::Order* FindOrderResponse::_internal_mutable_order() {
  
  if (order_ == nullptr) {
    auto* p = CreateMaybeMessage<::gemini::Order>(GetArenaNoVirtual());
    order_ = p;
  }
  return order_;
}
inline ::gemini::Order* FindOrderResponse::mutable_order() {
  // @@protoc_insertion_point(field_mutable:gemini.FindOrderResponse.order)
  return _internal_mutable_order();
}
inline void FindOrderResponse::set_allocated_order(::gemini::Order* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete order_;
  }
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }
    
  } else {
    
  }
  order_ = order;
  // @@protoc_insertion_point(field_set_allocated:gemini.FindOrderResponse.order)
}

// -------------------------------------------------------------------

// DeleteOrderResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gemini

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_order_2eproto
