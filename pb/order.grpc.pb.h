// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: order.proto
#ifndef GRPC_order_2eproto__INCLUDED
#define GRPC_order_2eproto__INCLUDED

#include "order.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace gemini {

class OrderService final {
 public:
  static constexpr char const* service_full_name() {
    return "gemini.OrderService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status PostOrder(::grpc::ClientContext* context, const ::gemini::PostOrderRequest& request, ::gemini::PostOrderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gemini::PostOrderResponse>> AsyncPostOrder(::grpc::ClientContext* context, const ::gemini::PostOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gemini::PostOrderResponse>>(AsyncPostOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gemini::PostOrderResponse>> PrepareAsyncPostOrder(::grpc::ClientContext* context, const ::gemini::PostOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gemini::PostOrderResponse>>(PrepareAsyncPostOrderRaw(context, request, cq));
    }
    virtual ::grpc::Status ListOrderBySellerId(::grpc::ClientContext* context, const ::gemini::ListOrderBySellerIdRequest& request, ::gemini::ListOrderBySellerIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gemini::ListOrderBySellerIdResponse>> AsyncListOrderBySellerId(::grpc::ClientContext* context, const ::gemini::ListOrderBySellerIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gemini::ListOrderBySellerIdResponse>>(AsyncListOrderBySellerIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gemini::ListOrderBySellerIdResponse>> PrepareAsyncListOrderBySellerId(::grpc::ClientContext* context, const ::gemini::ListOrderBySellerIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gemini::ListOrderBySellerIdResponse>>(PrepareAsyncListOrderBySellerIdRaw(context, request, cq));
    }
    virtual ::grpc::Status ListOrderByOrdererId(::grpc::ClientContext* context, const ::gemini::ListOrderByOrdererIdRequest& request, ::gemini::ListOrderByOrdererIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gemini::ListOrderByOrdererIdResponse>> AsyncListOrderByOrdererId(::grpc::ClientContext* context, const ::gemini::ListOrderByOrdererIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gemini::ListOrderByOrdererIdResponse>>(AsyncListOrderByOrdererIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gemini::ListOrderByOrdererIdResponse>> PrepareAsyncListOrderByOrdererId(::grpc::ClientContext* context, const ::gemini::ListOrderByOrdererIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gemini::ListOrderByOrdererIdResponse>>(PrepareAsyncListOrderByOrdererIdRaw(context, request, cq));
    }
    virtual ::grpc::Status FindOrder(::grpc::ClientContext* context, const ::gemini::FindOrderRequest& request, ::gemini::FindOrderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gemini::FindOrderResponse>> AsyncFindOrder(::grpc::ClientContext* context, const ::gemini::FindOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gemini::FindOrderResponse>>(AsyncFindOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gemini::FindOrderResponse>> PrepareAsyncFindOrder(::grpc::ClientContext* context, const ::gemini::FindOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gemini::FindOrderResponse>>(PrepareAsyncFindOrderRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteOrder(::grpc::ClientContext* context, const ::gemini::DeleteOrderRequest& request, ::gemini::DeleteOrderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gemini::DeleteOrderResponse>> AsyncDeleteOrder(::grpc::ClientContext* context, const ::gemini::DeleteOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gemini::DeleteOrderResponse>>(AsyncDeleteOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gemini::DeleteOrderResponse>> PrepareAsyncDeleteOrder(::grpc::ClientContext* context, const ::gemini::DeleteOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gemini::DeleteOrderResponse>>(PrepareAsyncDeleteOrderRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void PostOrder(::grpc::ClientContext* context, const ::gemini::PostOrderRequest* request, ::gemini::PostOrderResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemini::PostOrderResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PostOrder(::grpc::ClientContext* context, const ::gemini::PostOrderRequest* request, ::gemini::PostOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PostOrder(::grpc::ClientContext* context, const ::gemini::PostOrderRequest* request, ::gemini::PostOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PostOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemini::PostOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PostOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemini::PostOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ListOrderBySellerId(::grpc::ClientContext* context, const ::gemini::ListOrderBySellerIdRequest* request, ::gemini::ListOrderBySellerIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListOrderBySellerId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemini::ListOrderBySellerIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListOrderBySellerId(::grpc::ClientContext* context, const ::gemini::ListOrderBySellerIdRequest* request, ::gemini::ListOrderBySellerIdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListOrderBySellerId(::grpc::ClientContext* context, const ::gemini::ListOrderBySellerIdRequest* request, ::gemini::ListOrderBySellerIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListOrderBySellerId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemini::ListOrderBySellerIdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListOrderBySellerId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemini::ListOrderBySellerIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ListOrderByOrdererId(::grpc::ClientContext* context, const ::gemini::ListOrderByOrdererIdRequest* request, ::gemini::ListOrderByOrdererIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListOrderByOrdererId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemini::ListOrderByOrdererIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListOrderByOrdererId(::grpc::ClientContext* context, const ::gemini::ListOrderByOrdererIdRequest* request, ::gemini::ListOrderByOrdererIdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListOrderByOrdererId(::grpc::ClientContext* context, const ::gemini::ListOrderByOrdererIdRequest* request, ::gemini::ListOrderByOrdererIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListOrderByOrdererId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemini::ListOrderByOrdererIdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListOrderByOrdererId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemini::ListOrderByOrdererIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void FindOrder(::grpc::ClientContext* context, const ::gemini::FindOrderRequest* request, ::gemini::FindOrderResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FindOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemini::FindOrderResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void FindOrder(::grpc::ClientContext* context, const ::gemini::FindOrderRequest* request, ::gemini::FindOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void FindOrder(::grpc::ClientContext* context, const ::gemini::FindOrderRequest* request, ::gemini::FindOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void FindOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemini::FindOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void FindOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemini::FindOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DeleteOrder(::grpc::ClientContext* context, const ::gemini::DeleteOrderRequest* request, ::gemini::DeleteOrderResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemini::DeleteOrderResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteOrder(::grpc::ClientContext* context, const ::gemini::DeleteOrderRequest* request, ::gemini::DeleteOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteOrder(::grpc::ClientContext* context, const ::gemini::DeleteOrderRequest* request, ::gemini::DeleteOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemini::DeleteOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemini::DeleteOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gemini::PostOrderResponse>* AsyncPostOrderRaw(::grpc::ClientContext* context, const ::gemini::PostOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gemini::PostOrderResponse>* PrepareAsyncPostOrderRaw(::grpc::ClientContext* context, const ::gemini::PostOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gemini::ListOrderBySellerIdResponse>* AsyncListOrderBySellerIdRaw(::grpc::ClientContext* context, const ::gemini::ListOrderBySellerIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gemini::ListOrderBySellerIdResponse>* PrepareAsyncListOrderBySellerIdRaw(::grpc::ClientContext* context, const ::gemini::ListOrderBySellerIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gemini::ListOrderByOrdererIdResponse>* AsyncListOrderByOrdererIdRaw(::grpc::ClientContext* context, const ::gemini::ListOrderByOrdererIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gemini::ListOrderByOrdererIdResponse>* PrepareAsyncListOrderByOrdererIdRaw(::grpc::ClientContext* context, const ::gemini::ListOrderByOrdererIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gemini::FindOrderResponse>* AsyncFindOrderRaw(::grpc::ClientContext* context, const ::gemini::FindOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gemini::FindOrderResponse>* PrepareAsyncFindOrderRaw(::grpc::ClientContext* context, const ::gemini::FindOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gemini::DeleteOrderResponse>* AsyncDeleteOrderRaw(::grpc::ClientContext* context, const ::gemini::DeleteOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gemini::DeleteOrderResponse>* PrepareAsyncDeleteOrderRaw(::grpc::ClientContext* context, const ::gemini::DeleteOrderRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status PostOrder(::grpc::ClientContext* context, const ::gemini::PostOrderRequest& request, ::gemini::PostOrderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gemini::PostOrderResponse>> AsyncPostOrder(::grpc::ClientContext* context, const ::gemini::PostOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gemini::PostOrderResponse>>(AsyncPostOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gemini::PostOrderResponse>> PrepareAsyncPostOrder(::grpc::ClientContext* context, const ::gemini::PostOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gemini::PostOrderResponse>>(PrepareAsyncPostOrderRaw(context, request, cq));
    }
    ::grpc::Status ListOrderBySellerId(::grpc::ClientContext* context, const ::gemini::ListOrderBySellerIdRequest& request, ::gemini::ListOrderBySellerIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gemini::ListOrderBySellerIdResponse>> AsyncListOrderBySellerId(::grpc::ClientContext* context, const ::gemini::ListOrderBySellerIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gemini::ListOrderBySellerIdResponse>>(AsyncListOrderBySellerIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gemini::ListOrderBySellerIdResponse>> PrepareAsyncListOrderBySellerId(::grpc::ClientContext* context, const ::gemini::ListOrderBySellerIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gemini::ListOrderBySellerIdResponse>>(PrepareAsyncListOrderBySellerIdRaw(context, request, cq));
    }
    ::grpc::Status ListOrderByOrdererId(::grpc::ClientContext* context, const ::gemini::ListOrderByOrdererIdRequest& request, ::gemini::ListOrderByOrdererIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gemini::ListOrderByOrdererIdResponse>> AsyncListOrderByOrdererId(::grpc::ClientContext* context, const ::gemini::ListOrderByOrdererIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gemini::ListOrderByOrdererIdResponse>>(AsyncListOrderByOrdererIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gemini::ListOrderByOrdererIdResponse>> PrepareAsyncListOrderByOrdererId(::grpc::ClientContext* context, const ::gemini::ListOrderByOrdererIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gemini::ListOrderByOrdererIdResponse>>(PrepareAsyncListOrderByOrdererIdRaw(context, request, cq));
    }
    ::grpc::Status FindOrder(::grpc::ClientContext* context, const ::gemini::FindOrderRequest& request, ::gemini::FindOrderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gemini::FindOrderResponse>> AsyncFindOrder(::grpc::ClientContext* context, const ::gemini::FindOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gemini::FindOrderResponse>>(AsyncFindOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gemini::FindOrderResponse>> PrepareAsyncFindOrder(::grpc::ClientContext* context, const ::gemini::FindOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gemini::FindOrderResponse>>(PrepareAsyncFindOrderRaw(context, request, cq));
    }
    ::grpc::Status DeleteOrder(::grpc::ClientContext* context, const ::gemini::DeleteOrderRequest& request, ::gemini::DeleteOrderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gemini::DeleteOrderResponse>> AsyncDeleteOrder(::grpc::ClientContext* context, const ::gemini::DeleteOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gemini::DeleteOrderResponse>>(AsyncDeleteOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gemini::DeleteOrderResponse>> PrepareAsyncDeleteOrder(::grpc::ClientContext* context, const ::gemini::DeleteOrderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gemini::DeleteOrderResponse>>(PrepareAsyncDeleteOrderRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void PostOrder(::grpc::ClientContext* context, const ::gemini::PostOrderRequest* request, ::gemini::PostOrderResponse* response, std::function<void(::grpc::Status)>) override;
      void PostOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemini::PostOrderResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PostOrder(::grpc::ClientContext* context, const ::gemini::PostOrderRequest* request, ::gemini::PostOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PostOrder(::grpc::ClientContext* context, const ::gemini::PostOrderRequest* request, ::gemini::PostOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PostOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemini::PostOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PostOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemini::PostOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ListOrderBySellerId(::grpc::ClientContext* context, const ::gemini::ListOrderBySellerIdRequest* request, ::gemini::ListOrderBySellerIdResponse* response, std::function<void(::grpc::Status)>) override;
      void ListOrderBySellerId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemini::ListOrderBySellerIdResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListOrderBySellerId(::grpc::ClientContext* context, const ::gemini::ListOrderBySellerIdRequest* request, ::gemini::ListOrderBySellerIdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListOrderBySellerId(::grpc::ClientContext* context, const ::gemini::ListOrderBySellerIdRequest* request, ::gemini::ListOrderBySellerIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListOrderBySellerId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemini::ListOrderBySellerIdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListOrderBySellerId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemini::ListOrderBySellerIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ListOrderByOrdererId(::grpc::ClientContext* context, const ::gemini::ListOrderByOrdererIdRequest* request, ::gemini::ListOrderByOrdererIdResponse* response, std::function<void(::grpc::Status)>) override;
      void ListOrderByOrdererId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemini::ListOrderByOrdererIdResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListOrderByOrdererId(::grpc::ClientContext* context, const ::gemini::ListOrderByOrdererIdRequest* request, ::gemini::ListOrderByOrdererIdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListOrderByOrdererId(::grpc::ClientContext* context, const ::gemini::ListOrderByOrdererIdRequest* request, ::gemini::ListOrderByOrdererIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListOrderByOrdererId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemini::ListOrderByOrdererIdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListOrderByOrdererId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemini::ListOrderByOrdererIdResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void FindOrder(::grpc::ClientContext* context, const ::gemini::FindOrderRequest* request, ::gemini::FindOrderResponse* response, std::function<void(::grpc::Status)>) override;
      void FindOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemini::FindOrderResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void FindOrder(::grpc::ClientContext* context, const ::gemini::FindOrderRequest* request, ::gemini::FindOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void FindOrder(::grpc::ClientContext* context, const ::gemini::FindOrderRequest* request, ::gemini::FindOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void FindOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemini::FindOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void FindOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemini::FindOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteOrder(::grpc::ClientContext* context, const ::gemini::DeleteOrderRequest* request, ::gemini::DeleteOrderResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemini::DeleteOrderResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteOrder(::grpc::ClientContext* context, const ::gemini::DeleteOrderRequest* request, ::gemini::DeleteOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteOrder(::grpc::ClientContext* context, const ::gemini::DeleteOrderRequest* request, ::gemini::DeleteOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemini::DeleteOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::gemini::DeleteOrderResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::gemini::PostOrderResponse>* AsyncPostOrderRaw(::grpc::ClientContext* context, const ::gemini::PostOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gemini::PostOrderResponse>* PrepareAsyncPostOrderRaw(::grpc::ClientContext* context, const ::gemini::PostOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gemini::ListOrderBySellerIdResponse>* AsyncListOrderBySellerIdRaw(::grpc::ClientContext* context, const ::gemini::ListOrderBySellerIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gemini::ListOrderBySellerIdResponse>* PrepareAsyncListOrderBySellerIdRaw(::grpc::ClientContext* context, const ::gemini::ListOrderBySellerIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gemini::ListOrderByOrdererIdResponse>* AsyncListOrderByOrdererIdRaw(::grpc::ClientContext* context, const ::gemini::ListOrderByOrdererIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gemini::ListOrderByOrdererIdResponse>* PrepareAsyncListOrderByOrdererIdRaw(::grpc::ClientContext* context, const ::gemini::ListOrderByOrdererIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gemini::FindOrderResponse>* AsyncFindOrderRaw(::grpc::ClientContext* context, const ::gemini::FindOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gemini::FindOrderResponse>* PrepareAsyncFindOrderRaw(::grpc::ClientContext* context, const ::gemini::FindOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gemini::DeleteOrderResponse>* AsyncDeleteOrderRaw(::grpc::ClientContext* context, const ::gemini::DeleteOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gemini::DeleteOrderResponse>* PrepareAsyncDeleteOrderRaw(::grpc::ClientContext* context, const ::gemini::DeleteOrderRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_PostOrder_;
    const ::grpc::internal::RpcMethod rpcmethod_ListOrderBySellerId_;
    const ::grpc::internal::RpcMethod rpcmethod_ListOrderByOrdererId_;
    const ::grpc::internal::RpcMethod rpcmethod_FindOrder_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteOrder_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status PostOrder(::grpc::ServerContext* context, const ::gemini::PostOrderRequest* request, ::gemini::PostOrderResponse* response);
    virtual ::grpc::Status ListOrderBySellerId(::grpc::ServerContext* context, const ::gemini::ListOrderBySellerIdRequest* request, ::gemini::ListOrderBySellerIdResponse* response);
    virtual ::grpc::Status ListOrderByOrdererId(::grpc::ServerContext* context, const ::gemini::ListOrderByOrdererIdRequest* request, ::gemini::ListOrderByOrdererIdResponse* response);
    virtual ::grpc::Status FindOrder(::grpc::ServerContext* context, const ::gemini::FindOrderRequest* request, ::gemini::FindOrderResponse* response);
    virtual ::grpc::Status DeleteOrder(::grpc::ServerContext* context, const ::gemini::DeleteOrderRequest* request, ::gemini::DeleteOrderResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_PostOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PostOrder() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_PostOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostOrder(::grpc::ServerContext* /*context*/, const ::gemini::PostOrderRequest* /*request*/, ::gemini::PostOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostOrder(::grpc::ServerContext* context, ::gemini::PostOrderRequest* request, ::grpc::ServerAsyncResponseWriter< ::gemini::PostOrderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListOrderBySellerId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListOrderBySellerId() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListOrderBySellerId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOrderBySellerId(::grpc::ServerContext* /*context*/, const ::gemini::ListOrderBySellerIdRequest* /*request*/, ::gemini::ListOrderBySellerIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListOrderBySellerId(::grpc::ServerContext* context, ::gemini::ListOrderBySellerIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::gemini::ListOrderBySellerIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListOrderByOrdererId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListOrderByOrdererId() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ListOrderByOrdererId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOrderByOrdererId(::grpc::ServerContext* /*context*/, const ::gemini::ListOrderByOrdererIdRequest* /*request*/, ::gemini::ListOrderByOrdererIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListOrderByOrdererId(::grpc::ServerContext* context, ::gemini::ListOrderByOrdererIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::gemini::ListOrderByOrdererIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FindOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FindOrder() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_FindOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindOrder(::grpc::ServerContext* /*context*/, const ::gemini::FindOrderRequest* /*request*/, ::gemini::FindOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindOrder(::grpc::ServerContext* context, ::gemini::FindOrderRequest* request, ::grpc::ServerAsyncResponseWriter< ::gemini::FindOrderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteOrder() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOrder(::grpc::ServerContext* /*context*/, const ::gemini::DeleteOrderRequest* /*request*/, ::gemini::DeleteOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteOrder(::grpc::ServerContext* context, ::gemini::DeleteOrderRequest* request, ::grpc::ServerAsyncResponseWriter< ::gemini::DeleteOrderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_PostOrder<WithAsyncMethod_ListOrderBySellerId<WithAsyncMethod_ListOrderByOrdererId<WithAsyncMethod_FindOrder<WithAsyncMethod_DeleteOrder<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PostOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PostOrder() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::gemini::PostOrderRequest, ::gemini::PostOrderResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::gemini::PostOrderRequest* request, ::gemini::PostOrderResponse* response) { return this->PostOrder(context, request, response); }));}
    void SetMessageAllocatorFor_PostOrder(
        ::grpc::experimental::MessageAllocator< ::gemini::PostOrderRequest, ::gemini::PostOrderResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::gemini::PostOrderRequest, ::gemini::PostOrderResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PostOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostOrder(::grpc::ServerContext* /*context*/, const ::gemini::PostOrderRequest* /*request*/, ::gemini::PostOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PostOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::gemini::PostOrderRequest* /*request*/, ::gemini::PostOrderResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PostOrder(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::gemini::PostOrderRequest* /*request*/, ::gemini::PostOrderResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListOrderBySellerId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListOrderBySellerId() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::gemini::ListOrderBySellerIdRequest, ::gemini::ListOrderBySellerIdResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::gemini::ListOrderBySellerIdRequest* request, ::gemini::ListOrderBySellerIdResponse* response) { return this->ListOrderBySellerId(context, request, response); }));}
    void SetMessageAllocatorFor_ListOrderBySellerId(
        ::grpc::experimental::MessageAllocator< ::gemini::ListOrderBySellerIdRequest, ::gemini::ListOrderBySellerIdResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::gemini::ListOrderBySellerIdRequest, ::gemini::ListOrderBySellerIdResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListOrderBySellerId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOrderBySellerId(::grpc::ServerContext* /*context*/, const ::gemini::ListOrderBySellerIdRequest* /*request*/, ::gemini::ListOrderBySellerIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListOrderBySellerId(
      ::grpc::CallbackServerContext* /*context*/, const ::gemini::ListOrderBySellerIdRequest* /*request*/, ::gemini::ListOrderBySellerIdResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListOrderBySellerId(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::gemini::ListOrderBySellerIdRequest* /*request*/, ::gemini::ListOrderBySellerIdResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListOrderByOrdererId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListOrderByOrdererId() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::gemini::ListOrderByOrdererIdRequest, ::gemini::ListOrderByOrdererIdResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::gemini::ListOrderByOrdererIdRequest* request, ::gemini::ListOrderByOrdererIdResponse* response) { return this->ListOrderByOrdererId(context, request, response); }));}
    void SetMessageAllocatorFor_ListOrderByOrdererId(
        ::grpc::experimental::MessageAllocator< ::gemini::ListOrderByOrdererIdRequest, ::gemini::ListOrderByOrdererIdResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::gemini::ListOrderByOrdererIdRequest, ::gemini::ListOrderByOrdererIdResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListOrderByOrdererId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOrderByOrdererId(::grpc::ServerContext* /*context*/, const ::gemini::ListOrderByOrdererIdRequest* /*request*/, ::gemini::ListOrderByOrdererIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListOrderByOrdererId(
      ::grpc::CallbackServerContext* /*context*/, const ::gemini::ListOrderByOrdererIdRequest* /*request*/, ::gemini::ListOrderByOrdererIdResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListOrderByOrdererId(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::gemini::ListOrderByOrdererIdRequest* /*request*/, ::gemini::ListOrderByOrdererIdResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_FindOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_FindOrder() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::gemini::FindOrderRequest, ::gemini::FindOrderResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::gemini::FindOrderRequest* request, ::gemini::FindOrderResponse* response) { return this->FindOrder(context, request, response); }));}
    void SetMessageAllocatorFor_FindOrder(
        ::grpc::experimental::MessageAllocator< ::gemini::FindOrderRequest, ::gemini::FindOrderResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::gemini::FindOrderRequest, ::gemini::FindOrderResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_FindOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindOrder(::grpc::ServerContext* /*context*/, const ::gemini::FindOrderRequest* /*request*/, ::gemini::FindOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* FindOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::gemini::FindOrderRequest* /*request*/, ::gemini::FindOrderResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* FindOrder(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::gemini::FindOrderRequest* /*request*/, ::gemini::FindOrderResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteOrder() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::gemini::DeleteOrderRequest, ::gemini::DeleteOrderResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::gemini::DeleteOrderRequest* request, ::gemini::DeleteOrderResponse* response) { return this->DeleteOrder(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteOrder(
        ::grpc::experimental::MessageAllocator< ::gemini::DeleteOrderRequest, ::gemini::DeleteOrderResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::gemini::DeleteOrderRequest, ::gemini::DeleteOrderResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOrder(::grpc::ServerContext* /*context*/, const ::gemini::DeleteOrderRequest* /*request*/, ::gemini::DeleteOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::gemini::DeleteOrderRequest* /*request*/, ::gemini::DeleteOrderResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteOrder(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::gemini::DeleteOrderRequest* /*request*/, ::gemini::DeleteOrderResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_PostOrder<ExperimentalWithCallbackMethod_ListOrderBySellerId<ExperimentalWithCallbackMethod_ListOrderByOrdererId<ExperimentalWithCallbackMethod_FindOrder<ExperimentalWithCallbackMethod_DeleteOrder<Service > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_PostOrder<ExperimentalWithCallbackMethod_ListOrderBySellerId<ExperimentalWithCallbackMethod_ListOrderByOrdererId<ExperimentalWithCallbackMethod_FindOrder<ExperimentalWithCallbackMethod_DeleteOrder<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_PostOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PostOrder() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_PostOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostOrder(::grpc::ServerContext* /*context*/, const ::gemini::PostOrderRequest* /*request*/, ::gemini::PostOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListOrderBySellerId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListOrderBySellerId() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListOrderBySellerId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOrderBySellerId(::grpc::ServerContext* /*context*/, const ::gemini::ListOrderBySellerIdRequest* /*request*/, ::gemini::ListOrderBySellerIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListOrderByOrdererId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListOrderByOrdererId() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ListOrderByOrdererId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOrderByOrdererId(::grpc::ServerContext* /*context*/, const ::gemini::ListOrderByOrdererIdRequest* /*request*/, ::gemini::ListOrderByOrdererIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FindOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FindOrder() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_FindOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindOrder(::grpc::ServerContext* /*context*/, const ::gemini::FindOrderRequest* /*request*/, ::gemini::FindOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteOrder() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOrder(::grpc::ServerContext* /*context*/, const ::gemini::DeleteOrderRequest* /*request*/, ::gemini::DeleteOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PostOrder() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_PostOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostOrder(::grpc::ServerContext* /*context*/, const ::gemini::PostOrderRequest* /*request*/, ::gemini::PostOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostOrder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListOrderBySellerId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListOrderBySellerId() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListOrderBySellerId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOrderBySellerId(::grpc::ServerContext* /*context*/, const ::gemini::ListOrderBySellerIdRequest* /*request*/, ::gemini::ListOrderBySellerIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListOrderBySellerId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListOrderByOrdererId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListOrderByOrdererId() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ListOrderByOrdererId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOrderByOrdererId(::grpc::ServerContext* /*context*/, const ::gemini::ListOrderByOrdererIdRequest* /*request*/, ::gemini::ListOrderByOrdererIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListOrderByOrdererId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FindOrder() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_FindOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindOrder(::grpc::ServerContext* /*context*/, const ::gemini::FindOrderRequest* /*request*/, ::gemini::FindOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindOrder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteOrder() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DeleteOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOrder(::grpc::ServerContext* /*context*/, const ::gemini::DeleteOrderRequest* /*request*/, ::gemini::DeleteOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteOrder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PostOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PostOrder() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PostOrder(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_PostOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostOrder(::grpc::ServerContext* /*context*/, const ::gemini::PostOrderRequest* /*request*/, ::gemini::PostOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PostOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PostOrder(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListOrderBySellerId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListOrderBySellerId() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListOrderBySellerId(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListOrderBySellerId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOrderBySellerId(::grpc::ServerContext* /*context*/, const ::gemini::ListOrderBySellerIdRequest* /*request*/, ::gemini::ListOrderBySellerIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListOrderBySellerId(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListOrderBySellerId(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListOrderByOrdererId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListOrderByOrdererId() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListOrderByOrdererId(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListOrderByOrdererId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOrderByOrdererId(::grpc::ServerContext* /*context*/, const ::gemini::ListOrderByOrdererIdRequest* /*request*/, ::gemini::ListOrderByOrdererIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListOrderByOrdererId(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListOrderByOrdererId(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_FindOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_FindOrder() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FindOrder(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_FindOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindOrder(::grpc::ServerContext* /*context*/, const ::gemini::FindOrderRequest* /*request*/, ::gemini::FindOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* FindOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* FindOrder(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteOrder() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteOrder(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOrder(::grpc::ServerContext* /*context*/, const ::gemini::DeleteOrderRequest* /*request*/, ::gemini::DeleteOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteOrder(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PostOrder() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::gemini::PostOrderRequest, ::gemini::PostOrderResponse>(std::bind(&WithStreamedUnaryMethod_PostOrder<BaseClass>::StreamedPostOrder, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PostOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostOrder(::grpc::ServerContext* /*context*/, const ::gemini::PostOrderRequest* /*request*/, ::gemini::PostOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostOrder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gemini::PostOrderRequest,::gemini::PostOrderResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListOrderBySellerId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListOrderBySellerId() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::gemini::ListOrderBySellerIdRequest, ::gemini::ListOrderBySellerIdResponse>(std::bind(&WithStreamedUnaryMethod_ListOrderBySellerId<BaseClass>::StreamedListOrderBySellerId, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListOrderBySellerId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListOrderBySellerId(::grpc::ServerContext* /*context*/, const ::gemini::ListOrderBySellerIdRequest* /*request*/, ::gemini::ListOrderBySellerIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListOrderBySellerId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gemini::ListOrderBySellerIdRequest,::gemini::ListOrderBySellerIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListOrderByOrdererId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListOrderByOrdererId() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::gemini::ListOrderByOrdererIdRequest, ::gemini::ListOrderByOrdererIdResponse>(std::bind(&WithStreamedUnaryMethod_ListOrderByOrdererId<BaseClass>::StreamedListOrderByOrdererId, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListOrderByOrdererId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListOrderByOrdererId(::grpc::ServerContext* /*context*/, const ::gemini::ListOrderByOrdererIdRequest* /*request*/, ::gemini::ListOrderByOrdererIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListOrderByOrdererId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gemini::ListOrderByOrdererIdRequest,::gemini::ListOrderByOrdererIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FindOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FindOrder() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::gemini::FindOrderRequest, ::gemini::FindOrderResponse>(std::bind(&WithStreamedUnaryMethod_FindOrder<BaseClass>::StreamedFindOrder, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_FindOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindOrder(::grpc::ServerContext* /*context*/, const ::gemini::FindOrderRequest* /*request*/, ::gemini::FindOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFindOrder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gemini::FindOrderRequest,::gemini::FindOrderResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteOrder() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::gemini::DeleteOrderRequest, ::gemini::DeleteOrderResponse>(std::bind(&WithStreamedUnaryMethod_DeleteOrder<BaseClass>::StreamedDeleteOrder, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteOrder(::grpc::ServerContext* /*context*/, const ::gemini::DeleteOrderRequest* /*request*/, ::gemini::DeleteOrderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteOrder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gemini::DeleteOrderRequest,::gemini::DeleteOrderResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_PostOrder<WithStreamedUnaryMethod_ListOrderBySellerId<WithStreamedUnaryMethod_ListOrderByOrdererId<WithStreamedUnaryMethod_FindOrder<WithStreamedUnaryMethod_DeleteOrder<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_PostOrder<WithStreamedUnaryMethod_ListOrderBySellerId<WithStreamedUnaryMethod_ListOrderByOrdererId<WithStreamedUnaryMethod_FindOrder<WithStreamedUnaryMethod_DeleteOrder<Service > > > > > StreamedService;
};

}  // namespace gemini


#endif  // GRPC_order_2eproto__INCLUDED
